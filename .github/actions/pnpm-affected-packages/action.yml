name: pnpm Affected Packages
description: 'Get paths of all non-private pnpm packages with changes in the monorepo.'

outputs:
  affected-packages: 
    description: 'A JSON array of affected package paths (relative to repo root).'
    value: ${{ steps.compute-affected-packages.outputs.affected-packages }}

runs:
  using: composite
  steps:
    - name: Get changeset status
      id: changeset-status
      shell: bash
      run: |
        pnpm changeset status --output changes.json
        echo "changes-output=$(cat changes.json | jq -c .)" >> $GITHUB_OUTPUT
    
    - name: Get pnpm packages
      id: pnpm-packages
      shell: bash
      run: |
        echo "packages-output=$(pnpm list --recursive --depth -1 --json | jq -c 'map(select(.private == false))')" >> $GITHUB_OUTPUT

    - name: Compute affected packages
      id: compute-affected-packages
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        CHANGES: ${{ steps.changeset-status.outputs.changes-output }}
        PACKAGES: ${{ steps.pnpm-packages.outputs.packages-output }}
      with:
        script: |
          const { relative } = require('node:path');
          const changes = JSON.parse(process.env.CHANGES);
          const packages = JSON.parse(process.env.PACKAGES);
          const packagesMap = Object.fromEntries(packages.map(p => [p.name, relative(process.cwd(), p.path)]));

          const affectedPackages = [
            ...new Set(
              changes.releases
                .filter(r => r.type !== 'none' && r.oldVersion !== r.newVersion)
                .flatMap(r => packagesMap[r.name])
                .filter(Boolean) // drop undefined
              ),
          ];
          core.setOutput('affected-packages', JSON.stringify(affectedPackages));
