---
import { dbEnv } from 'virtual:studiocms-devapps/config';

/**
 * Generates the source URL for an iframe based on the provided database URL.
 *
 * @param dbUrl - The URL of the database.
 * @returns The source URL for the iframe. If the database URL contains 'turso.io',
 *          it returns `tursoURL`. Otherwise, it returns `sqlLiteUrl`.
 */
function getIFrameSrc(dbUrl: string) {
	if (dbUrl.includes('turso.io')) {
		return 'https://studio.outerbase.com/embed/turso?theme=dark';
	}
	return 'https://studio.outerbase.com/embed/turso?theme=dark';
}
---
<html>
    <head>
        <style is:global>
            astro-dev-toolbar {
                display: none !important;
            }
        </style>
    </head>
    <body style="margin: 0; padding: 0; overflow: hidden;">
        <iframe id="sqlIframe"
            style="width: 100%; height: 100vh; border: none;"
            src={getIFrameSrc(dbEnv.remoteUrl)}
            title="Outerbase Studio"
            allow="clipboard-read; clipboard-write"
            data-dburl={dbEnv.remoteUrl}
            data-dbtoken={dbEnv.token}
            />

        <script>
            // @ts-ignore
            import { createClient } from 'https://esm.sh/@libsql/client@0.14.0/web';
            // @ts-ignore
            import { transformTursoResult } from 'https://esm.sh/@outerbase/sdk-transform@1.0.7';

            interface ClientRequest {
                type: 'query' | 'transaction';
                id: number;
                statement?: string;
                statements?: string[];
            }

            const iframe = document.querySelector('#sqlIframe') as HTMLIFrameElement;

            const dbUrl = iframe.dataset.dburl;
            const dbToken = iframe.dataset.dbtoken;

            const client = createClient({
                // biome-ignore lint/style/noNonNullAssertion: <explanation>
                url: dbUrl!,
                // biome-ignore lint/style/noNonNullAssertion: <explanation>
                authToken: dbToken!,
                intMode: 'bigint',
            });

            // Event listener to handle postMessage events
            window.addEventListener('message', async (e: MessageEvent<ClientRequest>) => {
                const contentWindow = iframe.contentWindow;

                if (contentWindow && e.data) {
                    const { type, id, statement, statements } = e.data;

                    if (type === 'query' && statement) {
                        // Execute a single SQL query
                        try {
                            const result = await client.execute(statement);
                            contentWindow.postMessage(
                                {
                                    type,
                                    id,
                                    data: transformTursoResult(result),
                                },
                                '*'
                            );
                        } catch (err) {
                            contentWindow.postMessage(
                                {
                                    type,
                                    id,
                                    error: (err as Error).message,
                                },
                                '*'
                            );
                        }
                    } else if (type === 'transaction' && statements) {
                        // Execute a batch of SQL statements in a transaction
                        try {
                            const result = await client.batch(statements, 'write');
                            contentWindow.postMessage(
                                {
                                    type,
                                    id,
                                    data: result.map(transformTursoResult),
                                },
                                '*'
                            );
                        } catch (err) {
                            contentWindow.postMessage(
                                {
                                    type,
                                    id,
                                    error: (err as Error).message,
                                },
                                '*'
                            );
                        }
                    }
                }
            });
        </script>
    </body>
</html>