---
import { useTranslations } from 'studiocms:i18n';
import { Button } from 'studiocms:ui/components/button';
import AuthLayout from '../../layouts/AuthLayout.astro';

const lang = Astro.locals.StudioCMS.defaultLang;
const t = useTranslations(lang, '@studiocms/auth:logout');
---
<AuthLayout 
	title={t('title')} 
	description={t('description')} 
	{lang} 
	disableScreen
	>

<div slot="header">
	<h1>Logging out...</h1>
	<p>Please wait while we log you out. Or press the button below to cancel.</p>
</div>

<div>
	<Button id='cancel-logout' variant="solid" color='danger'>Cancel</Button>
</div>

</AuthLayout>

<div style="display: none;" id="routes" 
	data-redirect={Astro.locals.StudioCMS.routeMap.authLinks.logoutAPI}
	data-dashboard={Astro.locals.StudioCMS.routeMap.mainLinks.dashboardIndex}
	data-site-index={Astro.locals.StudioCMS.routeMap.mainLinks.baseSiteURL}
	></div>

<script>

	const cancelButton = document.getElementById('cancel-logout') as HTMLButtonElement;

	const routeMapLinks = document.getElementById('routes') as HTMLDivElement
	const logoutPostURL = routeMapLinks.dataset.redirect!;
	const dashboardURL = routeMapLinks.dataset.dashboard!;
	const siteIndexURL = routeMapLinks.dataset.siteIndex!;

	// Create an AbortController to cancel the request
	const abortController = new AbortController();
	let timeoutId: NodeJS.Timeout;

	function sendLogoutPost() {
		if (!logoutPostURL) return;
		fetch(logoutPostURL, {
			method: 'POST',
			signal: abortController.signal,
		}).then(() => {
			window.location.href = siteIndexURL;
		}).catch((error) => {
			// Only redirect to home if it's not an abort error
			if (error.name !== 'AbortError') {
				window.location.href = siteIndexURL;
			}
		});
	}

	// Add click handler for cancel button
	cancelButton.addEventListener('click', () => {
		// Clear the timeout to prevent logout from happening
		clearTimeout(timeoutId);
		// Abort the fetch request if it's already in progress
		abortController.abort();
		// Redirect to dashboard
		window.location.href = dashboardURL;
	});

	// Wait 5 seconds before sending the logout request
	timeoutId = setTimeout(() => {
		sendLogoutPost();
	}, 5000); // 5000 milliseconds = 5 seconds

</script>