---
import { StudioCMSRoutes } from 'studiocms:lib';
import { Button, Card, Center, Input } from 'studiocms:ui/components';
import { providerData, showOAuth } from '../../components/auth/oAuthButtonProviders.js';
import Layout from './components/Layout.astro';
import PageHeader from './components/PageHeader.astro';
import TabItem from './components/TabItem.astro';
import Tabs from './components/Tabs.astro';

// Define the current images for the providers
// This is a mapping of provider labels to their respective icons.
// If a provider does not have an icon, it will be logged to the console.
// This is used to ensure that the icons are available for the providers in the UI.
// If a provider is not found, it will be skipped in the UI rendering.
const currentImages = {
	Github: 'simple-icons:github',
	Discord: 'simple-icons:discord',
	Google: 'flat-color-icons:google',
	Auth0: 'simple-icons:auth0',
} as const;

// Map the provider data to the current images
const Providers = providerData
	.map((provider) => {
		if (!provider.enabled) return undefined;
		if (!currentImages[provider.label as keyof typeof currentImages]) {
			console.warn(`No icon found for provider: ${provider.label}`);
			return undefined;
		}

		return {
			label: provider.label,
			icon: currentImages[provider.label as keyof typeof currentImages],
			href: provider.href,
		};
	})
	.filter(Boolean) as {
	label: string;
	icon: string;
	href: string;
}[];
---
<Layout title="Welcome to StudioCMS">

    <PageHeader title="Welcome to StudioCMS" badge={{ label: 'Step 2' }} />

    <Card class='card' style="background-color: hsl(var(--background-step-1))" fullWidth>

        <div slot="header">
            <h2>Create an Administrator</h2>
        </div>

        <Tabs variant='starlight'>
            <TabItem label='Username and Password'>
                <form id="setup-step-two" action={StudioCMSRoutes.fts.step2}>
                    <div class="form-content">
                        
                        <Input 
                            label='Username' 
                            name='username' 
                            placeholder='john' 
                            isRequired 
                            />
                        
                        <Input 
                            label='Display Name' 
                            name='displayname' 
                            placeholder='John Doe' 
                            isRequired 
                            />
                        
                        <Input 
                            label='Email' 
                            name='email' 
                            placeholder='john@doe.com' 
                            isRequired 
                            />

                        <Input 
                            label='Password' 
                            name='password' 
                            placeholder='password' 
                            type="password" 
                            isRequired 
                            />

                        <Input 
                            label='Confirm Password' 
                            name='confirm-password' 
                            placeholder='password' 
                            type="password" 
                            isRequired 
                            />

                    </div>
                </form>
            </TabItem>

            {
                showOAuth && Providers.map(({ href, icon, label }) => {
                    return (
                        <TabItem label={label} icon={icon}>
                            <Center><Button color="primary" as="a" href={href}>Connect to {label}</Button></Center>
                        </TabItem>
                    )
                })
            }

        </Tabs>

        <div slot="footer">
            <div class="card-actions">
                <Button type="submit" form="setup-step-two" color="primary">Continue</Button> 
            </div>
        </div>

    </Card>

    <script>
        import { toast } from 'studiocms:ui/components';

        const form = document.querySelector('#setup-step-two') as HTMLFormElement;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(form);

            const data = {
                username: formData.get('username') as string,
                displayname: formData.get('displayname') as string,
                email: formData.get('email') as string,
                password: formData.get('password') as string,
                confirmPassword: formData.get('confirm-password') as string,
            }

            if (data.password !== data.confirmPassword) {
                toast({
                    title: 'Passwords do not match',
                    description: 'Please make sure the passwords match',
                    type: 'danger'
                });
                return;
            }

            const response = await fetch(form.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            if (response.ok) {
                window.location.assign('/done');
            } else {
                const error = await response.json();
                toast({
                    title: 'Error',
                    description: error.error,
                    type: 'danger',
                });
            }
        });
    </script>

    <style>
        .form-content {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
    
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }
    
        .login-preview-container {
            width: min-content;
            height: min-content;
        }
    
        @media screen and (max-width: 768px) {
            .form-row {
                grid-template-columns: 1fr;
            }
        }

        .card {
            margin-left: 20%;
            margin-right: 20%;
            width: 60%;
        }

        @media screen and (max-width: 768px) {
            .card {
                margin-left: 0;
                margin-right: 0;
                width: 100%;
            }
        }

        .card-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }
    </style>

</Layout>