---
import { useTranslations } from 'studiocms:i18n';
import { Mailer } from 'studiocms:mailer';
import { SDKCore } from 'studiocms:sdk';
import { Button } from 'studiocms:ui/components/button';
import { Card } from 'studiocms:ui/components/card';
import { Icon } from 'studiocms:ui/components/icon';
import { Input } from 'studiocms:ui/components/input';
import { Select } from 'studiocms:ui/components/select';
import { Toggle } from 'studiocms:ui/components/toggle';
import PageHeader from '../../components/dashboard/PageHeader.astro';
import { Effect, genLogger, runEffect } from '../../effect.js';
import Layout from '../../layouts/DashboardLayout.astro';

const { siteConfig: config, defaultLang: lang, security } = Astro.locals.StudioCMS;

const currentUser = security?.userSessionData ?? null;

const t = useTranslations(lang, '@studiocms/dashboard:smtp');

const [mailerConfig, notificationSettings] = await runEffect(
	genLogger('studiocms/routes/dashboard/smtp-configuration')(function* () {
		const mailer = yield* Mailer;
		const sdk = yield* SDKCore;

		return yield* Effect.all([mailer.getMailerConfigTable, sdk.notificationSettings.site.get()]);
	}).pipe(Mailer.Provide)
);

const {
	data: { enableMailer },
} = config;

let createConfig = false;

if (!mailerConfig) {
	createConfig = true;
}

const notificationSettingKeys = Object.keys(notificationSettings.data).filter(
	(key) => key !== '_config_version'
) as Array<keyof Omit<typeof notificationSettings.data, '_config_version'>>;
---

<Layout
  title={t("title")}
  description={t("description")}
  requiredPermission="owner"
  {lang}
  {config}
  {currentUser}
>
  <div slot="header">
    <PageHeader title={t("header")}>
      <Button
        variant="solid"
        color="primary"
        size="sm"
        type="submit"
        form="smtp-config-form"
      >
        <Icon
          slot="start-content"
          name="heroicons:check-20-solid"
          width={20}
          height={20}
        />
        <t-smtp key="save-button">{t("save-button")}</t-smtp>
      </Button>
    </PageHeader>
  </div>

  <div class="smtp-content">
    <Card fullWidth>
      <div slot="header">
        <h2><t-smtp key="smtp-settings">{t("smtp-settings")}</t-smtp></h2>
      </div>

      <form
        id="smtp-config-form"
        action={Astro.locals.StudioCMS.routeMap.endpointLinks.mailer.config}
      >
        <div class="form-content">
          {
            createConfig && (
              <input type="hidden" name="create-new-config" value="true" />
            )
          }

          <div class="form-row">
            <Input
              type="text"
              name="host"
              label={t("smtp-host")}
              placeholder={t("smtp-host-placeholder")}
              defaultValue={mailerConfig?.host}
              isRequired
            />
            <Input
              type="number"
              name="port"
              label={t("smtp-port")}
              placeholder={t("smtp-port-placeholder")}
              defaultValue={`${mailerConfig?.port}`}
              isRequired
            />
          </div>

          <div class="form-row">
            <Select
              label={t("smtp-secure")}
              name="secure"
              options={[
                { label: "True", value: "true" },
                { label: "False", value: "false" },
              ]}
              defaultValue={`${mailerConfig?.secure || false}`}
              isRequired
              fullWidth
            />

            <Input
              type="text"
              name="proxy"
              label={t("smtp-proxy")}
              placeholder={t("smtp-proxy-placeholder")}
              defaultValue={mailerConfig?.proxy || undefined}
            />
          </div>

          <div class="form-row">
            <Select
              label={t("smtp-tls-reject-unauthorized")}
              name="tls_rejectUnauthorized"
              options={[
                { label: "True", value: "true" },
                { label: "False", value: "false" },
              ]}
              defaultValue={`${mailerConfig?.tls_rejectUnauthorized || false}`}
              fullWidth
            />
            <Input
              type="text"
              name="tls_servername"
              label={t("smtp-tls-servername")}
              placeholder={t("smtp-tls-servername-placeholder")}
              defaultValue={mailerConfig?.tls_servername || undefined}
            />
          </div>

          <div class="form-row">
            <Input
              type="text"
              name="auth_user"
              label={t("smtp-user")}
              placeholder={t("smtp-user-placeholder")}
              defaultValue={mailerConfig?.auth_user || undefined}
              isRequired
            />
            <Input
              type="password"
              name="auth_pass"
              label={t("smtp-password")}
              placeholder={t("smtp-password-placeholder")}
              isRequired
            />
          </div>

          <Input
            type="text"
            name="default_sender"
            label={t("smtp-default-sender")}
            placeholder={t("smtp-default-sender-placeholder")}
            defaultValue={mailerConfig?.default_sender || undefined}
            isRequired
          />
        </div>
      </form>
    </Card>

    <Card fullWidth>
      <div slot="header">
        <h2><t-smtp key="test-smtp">{t("test-smtp")}</t-smtp></h2>
      </div>

      <form
        id="test-smtp-form"
        action={Astro.locals.StudioCMS.routeMap.endpointLinks.mailer.testEmail}
      >
        <div class="form-content">
          <Input
            type="text"
            name="test_email"
            label={t("test-email")}
            placeholder={t("test-email-placeholder")}
            isRequired
            disabled={!enableMailer}
          />
        </div>
      </form>

      <div slot="footer">
        <Button
          variant="solid"
          color="primary"
          size="sm"
          type="submit"
          form="test-smtp-form"
          disabled={!enableMailer}
        >
          <Icon
            slot="start-content"
            name="heroicons:inbox-20-solid"
            width={20}
            height={20}
          />
          <t-smtp key="send-test-email">{t("send-test-email")}</t-smtp>
        </Button>
      </div>
    </Card>

    <Card fullWidth>
      <div slot="header">
        <h2>
          <t-smtp key="site-email-settings">{t("site-email-settings")}</t-smtp>
        </h2>
      </div>

      <form
        id="notification-settings-form"
        action={Astro.locals.StudioCMS.routeMap.endpointLinks
          .emailNotificationSettingsSite}
      >
        <div class="form-content">
          {
            notificationSettingKeys.map((key) => (
              <Toggle
                name={key}
                label={t(key)}
                defaultChecked={notificationSettings.data[key] === true}
                color="primary"
              />
            ))
          }
        </div>
      </form>

      <div slot="footer">
        <Button
          variant="solid"
          color="primary"
          size="sm"
          type="submit"
          form="notification-settings-form"
        >
          <Icon
            slot="start-content"
            name="heroicons:check-20-solid"
            width={20}
            height={20}
          />
          <t-smtp key="save-email-settings">{t("save-email-settings")}</t-smtp>
        </Button>
      </div>
    </Card>
  </div>
</Layout>

<script>
  import { toast } from "studiocms:ui/components/toaster";

  const smtpConfigForm = document.getElementById(
    "smtp-config-form",
  ) as HTMLFormElement;
  const testSmtpForm = document.getElementById(
    "test-smtp-form",
  ) as HTMLFormElement;
  const notificationSettingsForm = document.getElementById(
    "notification-settings-form",
  ) as HTMLFormElement;

  smtpConfigForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(smtpConfigForm);

    const data: {
      port: number;
      host: string;
      secure: boolean;
      proxy: string | null;
      auth_user: string | null;
      auth_pass: string | null;
      tls_rejectUnauthorized: boolean | null;
      tls_servername: string | null;
      default_sender: string;
    } = {
      host: formData.get("host") as string,
      port: parseInt(formData.get("port") as string),
      secure: formData.get("secure") === "true",
      proxy: formData.get("proxy")?.toString() || null,
      tls_rejectUnauthorized:
        formData.get("tls_rejectUnauthorized") === "true" || null,
      tls_servername: formData.get("tls_servername")?.toString() || null,
      auth_user: formData.get("auth_user")?.toString() || null,
      auth_pass: formData.get("auth_pass")?.toString() || null,
      default_sender: formData.get("default_sender") as string,
    };

    const createNewConfig = formData.get("create-new-config") as string;

    const response = await fetch(smtpConfigForm.action, {
      method: createNewConfig ? "POST" : "PATCH",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      toast({
        title: "Error",
        description: "Failed to save SMTP configuration",
        type: "danger",
      });
      return;
    }

    const result = await response.json();

    if (result.message) {
      toast({
        title: "Success",
        description: result.message,
        type: "success",
      });
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    } else {
      toast({
        title: "Error",
        description: result.error,
        type: "danger",
      });
    }
  });

  testSmtpForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(testSmtpForm);

    const data = {
      test_email: formData.get("test_email") as string,
    };

    const response = await fetch(testSmtpForm.action, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      toast({
        title: "Error",
        description: "Failed to send test email",
        type: "danger",
      });
      return;
    }

    const result = await response.json();

    if (result.message) {
      toast({
        title: "Success",
        description: result.message,
        type: "success",
      });
    } else {
      toast({
        title: "Error",
        description: result.error,
        type: "danger",
      });
    }
  });

  notificationSettingsForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(notificationSettingsForm);

    const data = {
      emailVerification: formData.get("emailVerification") === "on",
      requireAdminVerification:
        formData.get("requireAdminVerification") === "on",
      requireEditorVerification:
        formData.get("requireEditorVerification") === "on",
      oAuthBypassVerification: formData.get("oAuthBypassVerification") === "on",
    };

    const response = await fetch(notificationSettingsForm.action, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      toast({
        title: "Error",
        description: "Failed to save notification settings",
        type: "danger",
      });
      return;
    }

    const result = await response.json();

    if (result.message) {
      toast({
        title: "Success",
        description: result.message,
        type: "success",
      });
    } else {
      toast({
        title: "Error",
        description: result.error,
        type: "danger",
      });
    }
  });
</script>

<script>
  import {
    $i18n,
    $localeSettings,
    baseTranslation,
    defaultLang,
    documentUpdater,
    makeTranslation,
    pageHeaderUpdater,
    updateElmLabel,
    updateElmPlaceholder,
    updateSelectElmLabel,
    updateToggleElmLabel,
  } from "studiocms:i18n/client";

  const currentPage = "@studiocms/dashboard:smtp";

  let lang = defaultLang;

  const i18n = $i18n(currentPage, baseTranslation[currentPage]);

  $localeSettings.subscribe((locale) => {
    lang = locale || defaultLang;
  });

  i18n.subscribe((comp) => {
    documentUpdater(comp, lang);
    pageHeaderUpdater(comp.header);
    updateElmLabel("host", comp["smtp-host"]);
    updateElmPlaceholder("host", comp["smtp-host-placeholder"]);
    updateElmLabel("port", comp["smtp-port"]);
    updateElmPlaceholder("port", comp["smtp-port-placeholder"]);
    updateElmLabel("proxy", comp["smtp-proxy"]);
    updateElmPlaceholder("proxy", comp["smtp-proxy-placeholder"]);
    updateElmLabel("tls_servername", comp["smtp-tls-servername"]);
    updateElmPlaceholder(
      "tls_servername",
      comp["smtp-tls-servername-placeholder"],
    );
    updateElmLabel("auth_user", comp["smtp-user"]);
    updateElmPlaceholder("auth_user", comp["smtp-user-placeholder"]);
    updateElmLabel("auth_pass", comp["smtp-password"]);
    updateElmPlaceholder("auth_pass", comp["smtp-password-placeholder"]);
    updateElmLabel("default_sender", comp["smtp-default-sender"]);
    updateElmPlaceholder(
      "default_sender",
      comp["smtp-default-sender-placeholder"],
    );
    updateElmLabel("test_email", comp["test-email"]);
    updateElmPlaceholder("test_email", comp["test-email-placeholder"]);
    updateSelectElmLabel("secure", comp["smtp-secure"]);
    updateSelectElmLabel(
      "tls_rejectUnauthorized",
      comp["smtp-tls-reject-unauthorized"],
    );

    document
      .querySelector("#notification-settings-form")
      ?.querySelectorAll("sui-toggle-label")
      .forEach((toggle) => {
        updateToggleElmLabel(
          toggle.getAttribute("for") as string,
          comp[
            toggle.getAttribute("for") as
              | "emailVerification"
              | "requireAdminVerification"
              | "requireEditorVerification"
              | "oAuthBypassVerification"
          ],
        );
      });
  });

  if (!customElements.get("t-smtp")) {
    customElements.define("t-smtp", makeTranslation(currentPage, i18n));
  }
</script>

<style>
  .form-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .smtp-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @media screen and (max-width: 768px) {
    .form-row {
      grid-template-columns: 1fr;
    }
  }
</style>
