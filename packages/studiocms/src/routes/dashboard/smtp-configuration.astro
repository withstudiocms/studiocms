---
import { useTranslations } from 'studiocms:i18n';
import { getMailerConfigTable } from 'studiocms:mailer';
import studioCMS_Cache from 'studiocms:sdk/cache';
import { Button, Card, Icon, Input, Select } from 'studiocms:ui/components';
import PageHeader from '../../components/dashboard/PageHeader.astro';
import Layout from '../../layouts/dashboard/Layout.astro';

const lang = 'en-us';
const t = useTranslations(lang, '@studiocms/dashboard:smtp');

const mailerConfig = await getMailerConfigTable();

let createConfig = false;

if (!mailerConfig) {
	createConfig = true;
}

const {
	data: { enableMailer },
} = await studioCMS_Cache.GET.siteConfig();
---

<Layout 
  title={t('title')}
  description={t('description')}
  requiredPermission='owner'
  {lang}
  >

  <div slot="header">
    <PageHeader title={t('header')}>
      <Button variant="solid" color="primary" size="sm" type="submit" form="smtp-config-form">
        <Icon slot="start-content" name="check-20-solid" width={20} height={20} />
        <t-smtp key="save-button">{t('save-button')}</t-smtp>
      </Button>
    </PageHeader>
  </div>

  <div class="smtp-content">
    <Card fullWidth>
      <div slot="header">
        <h2><t-smtp key="smtp-settings">{t('smtp-settings')}</t-smtp></h2>
      </div>
  
      <form id="smtp-config-form" action="#">
        <div class="form-content">
  
          { createConfig && <input type="hidden" name="create-new-config" value="true" /> }
  
          <div class="form-row">
            <Input
              type="text"
              name="host"
              label={t('smtp-host')}
              placeholder={t('smtp-host-placeholder')}
              defaultValue={mailerConfig?.host}
              isRequired
            />
            <Input
              type="number"
              name="port"
              label={t('smtp-port')}
              placeholder={t('smtp-port-placeholder')}
              defaultValue={`${mailerConfig?.port}`}
              isRequired
            /> 
          </div>
  
          <div class="form-row">
            <Select
              label={t('smtp-secure')}
              name="secure"
              options={[
                { label: 'True', value: 'true' },
                { label: 'False', value: 'false' },
              ]}
              defaultValue={`${mailerConfig?.secure || false}`}
              isRequired
              fullWidth
              />
  
            <Input
              type="text"
              name="proxy"
              label={t('smtp-proxy')}
              placeholder={t('smtp-proxy-placeholder')}
              defaultValue={mailerConfig?.proxy || undefined}
            />
          </div>
  
          <div class="form-row">
            <Select
              label={t('smtp-tls-reject-unauthorized')}
              name="tls_rejectUnauthorized"
              options={[
                { label: 'True', value: 'true' },
                { label: 'False', value: 'false' },
              ]}
              defaultValue={`${mailerConfig?.tls_rejectUnauthorized || false}`}
              fullWidth
              />
            <Input 
              type="text"
              name="tls_servername"
              label={t('smtp-tls-servername')}
              placeholder={t('smtp-tls-servername-placeholder')}
              defaultValue={mailerConfig?.tls_servername || undefined}
              />
          </div>
  
          <div class="form-row">
            <Input
              type="text"
              name="auth_user"
              label={t('smtp-user')}
              placeholder={t('smtp-user-placeholder')}
              defaultValue={mailerConfig?.auth_user || undefined}
            />
            <Input
              type="password"
              name="auth_pass"
              label={t('smtp-password')}
              placeholder={t('smtp-password-placeholder')}
            />
          </div>
  
          <Input 
            type="text"
            name="default_sender"
            label={t('smtp-default-sender')}
            placeholder={t('smtp-default-sender-placeholder')}
            defaultValue={mailerConfig?.default_sender || undefined}
            isRequired
            />
  
        </div>
      </form>
  
    </Card>
  
    <Card fullWidth>
      <div slot="header">
        <h2><t-smtp key="test-smtp">{t('test-smtp')}</t-smtp></h2>
      </div>
  
      <form id="test-smtp-form" action="#">
        <div class="form-content">
          <Input
            type="text"
            name="test_email"
            label={t('test-email')}
            placeholder={t('test-email-placeholder')}
            isRequired
            disabled={!enableMailer}
          />
        </div>
      </form>

      <div slot="footer">
        <Button variant="solid" color="primary" size="sm" type="submit" form="test-smtp-form" disabled={!enableMailer}>
          <Icon slot="start-content" name="inbox-20-solid" width={20} height={20} />
          <t-smtp key="send-test-email">{t('send-test-email')}</t-smtp>
        </Button>
      </div>
  
    </Card>
  </div>


</Layout>

<script>
    import { 
        $i18n,
        $localeSettings,
        baseTranslation,
        defaultLang,
        documentUpdater,
        makeTranslation,
        pageHeaderUpdater,
        updateElmLabel,
        updateElmPlaceholder,
        updateSelectElmLabel,
    } from 'studiocms:i18n/client';

    const currentPage = '@studiocms/dashboard:smtp';

    let lang = defaultLang;

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);

    $localeSettings.subscribe((locale) => {
        lang = locale || defaultLang;
    });
    
    i18n.subscribe(comp => {
      documentUpdater(comp, lang)
      pageHeaderUpdater(comp.header)
      updateElmLabel('host', comp['smtp-host']);
      updateElmPlaceholder('host', comp['smtp-host-placeholder']);
      updateElmLabel('port', comp['smtp-port']);
      updateElmPlaceholder('port', comp['smtp-port-placeholder']);
      updateElmLabel('proxy', comp['smtp-proxy']);
      updateElmPlaceholder('proxy', comp['smtp-proxy-placeholder']);
      updateElmLabel('tls_servername', comp['smtp-tls-servername']);
      updateElmPlaceholder('tls_servername', comp['smtp-tls-servername-placeholder']);
      updateElmLabel('auth_user', comp['smtp-user']);
      updateElmPlaceholder('auth_user', comp['smtp-user-placeholder']);
      updateElmLabel('auth_pass', comp['smtp-password']);
      updateElmPlaceholder('auth_pass', comp['smtp-password-placeholder']);
      updateElmLabel('default_sender', comp['smtp-default-sender']);
      updateElmPlaceholder('default_sender', comp['smtp-default-sender-placeholder']);
      updateElmLabel('test_email', comp['test-email']);
      updateElmPlaceholder('test_email', comp['test-email-placeholder']);
      updateSelectElmLabel('secure', comp['smtp-secure']);
      updateSelectElmLabel('tls_rejectUnauthorized', comp['smtp-tls-reject-unauthorized']);
    });
    
    if (!customElements.get('t-smtp')) {
        customElements.define('t-smtp', makeTranslation(currentPage, i18n));
    }
</script>

<style>
  .form-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .smtp-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  @media screen and (max-width: 768px) {
    .form-row {
      grid-template-columns: 1fr;
    }
  }
</style>
