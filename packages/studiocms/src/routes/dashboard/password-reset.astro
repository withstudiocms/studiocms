---
import { useTranslations } from 'studiocms:i18n';
import { StudioCMSRoutes } from 'studiocms:lib';
import logger from 'studiocms:logger';
import studioCMS_SDK from 'studiocms:sdk';
import { Button, Card, Icon, Input } from 'studiocms:ui/components';
import Layout from '../../layouts/dashboard/Layout.astro';

const lang = 'en';
const t = useTranslations(lang, '@studiocms/dashboard:password-reset');

const urlSearchParams = Astro.url.searchParams;

const token = urlSearchParams.get('token');
const id = urlSearchParams.get('id');
const userId = urlSearchParams.get('userid') ?? '';

if (!token || !id || !userId || userId === '') {
	logger.warn('Missing - token/id/userid');
	return new Response(null, { status: 404 });
}

const user = await studioCMS_SDK.GET.databaseEntry.users.byId(userId);

const { siteConfig: config, userSessionData: currentUser } = Astro.locals;

if (!user) {
	logger.warn('Missing - user');
	return new Response(null, { status: 404 });
}

const lookupToken = await studioCMS_SDK.resetTokenBucket.check(token);

if (!lookupToken) {
	logger.warn('Missing - token');
	return new Response(null, { status: 404 });
}
---

<Layout 
  title={t('title')}
  description={t('description')}
  requiredPermission={'none'}
  sidebar={false}
  {lang}
  {config}
  {currentUser}
  >

    <Card class="reset-form" fullWidth as="form" id="reset-password-form" action={StudioCMSRoutes.endpointLinks.resetPassword}>
        <div slot="header">
            <h2>
                <t-password-reset key="header">{t('header')}</t-password-reset>
            </h2>
            <p>
                <t-password-reset key="sub-header-start">{t('sub-header-start')}</t-password-reset>, {user?.name || 'User'}. <br />
                <t-password-reset key="sub-header-end">{t('sub-header-end')}</t-password-reset>
            </p>
        </div>

        <div class="password-reset-form-body">

            <input type="hidden" name="token" value={token} />
            <input type="hidden" name="id" value={id} />
            <input type="hidden" name="userid" value={userId} />

            <Input 
                label={t('password-label')}
                type='password'
                placeholder='********' 
                isRequired 
                autocomplete='password new_password'
                name='new-password' 
                />
        
            <Input 
                label={t('confirm-password-label')}
                type='password'
                placeholder='********' 
                isRequired 
                autocomplete='password new_password'
                name='confirm-new-password' 
                />
        </div>

        <div slot="footer">
            <div class="form-footer">
                <Button type='submit' size='sm' variant={'solid'} color='primary'>
                    <Icon slot="start-content" name="check" width={24} height={24} />
                    <t-password-reset key="reset-button">{t('reset-button')}</t-password-reset>
                </Button>
            </div>
        </div>

    </Card>

    <script>
        import { 
            $i18n,
            $localeSettings,
            baseTranslation,
            defaultLang,
            documentUpdater,
            makeTranslation,
            updateElmLabel,
        } from 'studiocms:i18n/client';
    
        const currentPage = '@studiocms/dashboard:password-reset';
    
        let lang = defaultLang;
    
        const i18n = $i18n(currentPage, baseTranslation[currentPage]);
    
        $localeSettings.subscribe((locale) => {
            lang = locale || defaultLang;
        });
        
        i18n.subscribe(comp => {
            documentUpdater(comp, lang);
            updateElmLabel('new-password', comp['password-label']);
            updateElmLabel('confirm-new-password', comp['confirm-password-label']);
        });
    
        if (!customElements.get('t-password-reset')) {
            customElements.define('t-password-reset', makeTranslation(currentPage, i18n));
        }
    </script>

    <script>
        import { toast } from "studiocms:ui/components";

        const resetForm = document.getElementById('reset-password-form') as HTMLFormElement;

        resetForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(resetForm);

            const data = {
                token: formData.get('token') as string,
                id: formData.get('id') as string,
                userid: formData.get('userid') as string,
                password: formData.get('new-password') as string,
                confirm_password: formData.get('confirm-new-password') as string,
            }

            const response = await fetch(resetForm.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })

            const res = await response.json();

            if (response.status !== 200) {
                toast({
                    title: 'Error',
                    description: res.error,
                    type: 'danger'
                })
            }

            if (response.status === 200) {
                toast({
                    title: 'Success',
                    description: res.message,
                    type: 'success'
                })
            }
        });
    </script>

    <style>
        .reset-form {
            max-width: 600px;
            margin: 0 auto;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);

            & h2 {
                margin: 0;
                padding: 1rem;
                font-size: 1.5rem;
                font-weight: 500;
                color: hsl(var(--text-base));
            }

            & p {
                margin: 0;
                padding: 1rem;
                font-size: 1rem;
                color: hsl(var(--text-muted));
            }

            & .password-reset-form-body {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }

            & .form-footer {
                display: flex;
                justify-content: flex-end;
                padding: 1rem;
            }
        }
    </style>

</Layout>
