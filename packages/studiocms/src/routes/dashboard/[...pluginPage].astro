---
import { getUserData } from 'studiocms:auth/lib/user';
import { getPluginDashboardPages } from 'studiocms:plugin-helpers';
import studioCMS_SDK_Cache from 'studiocms:sdk/cache';
import PageHeader from '../../components/dashboard/PageHeader.astro';
import Layout from '../../layouts/dashboard/Layout.astro';
import type { FinalDashboardPage } from '../../schemas/index.js';

const lang = 'en';

// Get all the pages from the plugins
const { adminPages, userPages } = getPluginDashboardPages();

// Get the plugin page param from the URL
const { pluginPage } = Astro.params;

// Declare the page variable
let page: FinalDashboardPage | undefined;

// If the plugin page is not found, return a 404
if (!pluginPage) {
	return new Response(null, { status: 404 });
}

// Find the page from the admin and user pages
page =
	adminPages.find(({ slug }) => slug === pluginPage) ||
	userPages.find(({ slug }) => slug === pluginPage);

// If the page is not found, return a 404
if (!page) {
	return new Response(null, { status: 404 });
}

// Destructure the page object
const {
	sidebar,
	components: { PageBodyComponent, PageActionsComponent, InnerSidebarComponent },
	title,
	description,
	requiredPermissions,
} = page;

// Check if the sidebar is double and if the InnerSidebarComponent exists to determine the sidebar configuration
const sidebarConfig = sidebar === 'double' && InnerSidebarComponent ? 'double' : 'single';

const [currentUser, config] = await Promise.all([
	getUserData(Astro),
	studioCMS_SDK_Cache.GET.siteConfig(),
]);
---

<Layout 
  title={title[lang]}
  description={description}
  requiredPermission={requiredPermissions}
  sidebar={sidebarConfig}
  {lang}
  {config}
  {currentUser}
  >

  { 
    sidebarConfig === 'double' && 
    /* This is a safety check due to types even though we are checking above */ 
    InnerSidebarComponent && ( 
      <div slot="double-sidebar" class="inner-sidebar-container">
        <div class="sidebar-links-container">
          <InnerSidebarComponent />
        </div>
      </div>
    )}

  <div slot="header">
    <PageHeader title={title[lang]}>
      {PageActionsComponent && ( 
        <div slot="page-actions-container">
          <PageActionsComponent />
        </div>
      )}
    </PageHeader>
  </div>

  <PageBodyComponent />

</Layout>

<style>
  .inner-sidebar-container {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 100vh;
    height: 100%;
    padding: 1.5rem;
  }
</style>
