---
import { FormattedDate } from 'studiocms:components';
import { useTranslations } from 'studiocms:i18n';
import { StudioCMSRoutes } from 'studiocms:lib';
import studioCMS_SDK from 'studiocms:sdk';
import studioCMS_SDK_Cache from 'studiocms:sdk/cache';
import { Button, Group, Input } from 'studiocms:ui/components';
import { convertChangesToDMP, diffJson } from 'diff';
import InnerSidebarElement from '../../../components/dashboard/content-mgmt/InnerSidebarElement.astro';
import PageHeader from '../../../components/dashboard/content-mgmt/PageHeader.astro';
import Layout from '../../../layouts/dashboard/Layout.astro';

const lang = 'en-us';
const t = useTranslations(lang, '@studiocms/dashboard:content-index');
const td = useTranslations(lang, '@studiocms/dashboard:content-diff');

const urlParams = Astro.url.searchParams;
const diffId = urlParams.get('diff');

if (!diffId) {
	return new Response(null, { status: 404 });
}

const diff = await studioCMS_SDK.diffTracking.get.withHtml(diffId);

if (!diff) {
	return new Response(null, { status: 404 });
}

const { data: page } = await studioCMS_SDK_Cache.GET.page.byId(diff.pageId);

const users = await studioCMS_SDK.GET.database.users();

const user = (id: string) => users.find((u) => u.id === id)?.name;

const testing = diffJson(diff.pageMetaData.start, diff.pageMetaData.end);

type ChangeType = -1 | 0 | 1;

interface ParsedChanges {
	modified: Record<string, { previous?: string; current?: string }>;
}

function trimCommas(text: string) {
	return text.replace(',', '');
}

function parseChanges(data: [ChangeType, string][]): ParsedChanges {
	const parsed: ParsedChanges = { modified: {} };
	const keyValueRegex = /"(.*?)": (.*)/;

	for (const [type, value] of data) {
		const trimmedValue = value.trim();
		const match = keyValueRegex.exec(trimmedValue);

		if (match) {
			const key = match[1];
			const val = match[2];

			if (type === -1) {
				parsed.modified[key] = { previous: trimCommas(val) };
			} else if (type === 1) {
				if (parsed.modified[key]) {
					parsed.modified[key].current = trimCommas(val);
				} else {
					parsed.modified[key] = { current: trimCommas(val) };
				}
			}
		}
	}

	return parsed;
}

// Example data
const data: [ChangeType, string][] = convertChangesToDMP(testing);

// Parse changes
const result = parseChanges(data);

const changes: {
	label: string;
	current?: string;
	previous?: string;
}[] = [];

const ModifiedItems = Object.entries(result.modified);

for (const {
	'0': label,
	'1': { current, previous },
} of ModifiedItems) {
	const blackListedLabels: string[] = ['publishedAt', 'updatedAt', 'authorId', 'contributorIds'];

	if (blackListedLabels.includes(label)) {
		continue;
	}

	changes.push({ label, current, previous });
}
---

<Layout 
  title={t('title')}
  description={t('description')}
  requiredPermission='editor'
  sidebar='double'
  {lang}
  >

    <div slot="double-sidebar" class="inner-sidebar-container">
        <div class="sidebar-links-container">
        <InnerSidebarElement {lang} />
        </div>
    </div>

    <div slot="header">
        <PageHeader {lang} />
        <span style="width: 100%; display: flex; padding: 1rem 0; gap: 1rem;">
            <Button 
              variant="outlined" 
              color="info" 
              size="sm"
              href={`${StudioCMSRoutes.mainLinks.contentManagementEdit}?edit=${page.id}`}
              ><t-content-diff key="view-page">{td('view-page')}</t-content-diff>
            </Button>

            <Group>
              <Button 
                id="revert-metadata" 
                variant={'outlined'} 
                color={'primary'} 
                size="sm" 
                disabled={changes.length === 0} 
                data-id={diff.id} 
                data-url="#"
                >Revert MetaData
              </Button>
              <Button 
                id="revert-content" 
                variant={'outlined'} 
                color={'primary'} 
                size="sm" 
                data-id={diff.id} 
                data-url="#"
                >Revert Content
              </Button>
              <Button 
                id="revert-all-changes" 
                variant={'outlined'} 
                color={'primary'} 
                size="sm" 
                data-id={diff.id} 
                data-url="#"
                >Revert All
              </Button>
            </Group>
        </span>
        <span>
          Edited by {user(diff.userId)} on <FormattedDate date={diff.timestamp!} />
        </span>
    </div>

    <h4>
      <t-content-diff key="page-metadata">{td('page-metadata')}</t-content-diff>
    </h4>

    {
      changes.length > 0 ? changes.map((item) => (
        <div class="diff-screen metadata-diffs">
          <div>{item.label}</div>
          <div class="form-row">

            <Input label="Previous" value={item.previous} disabled />

            <Input label="Current" value={item.current} disabled />

          </div>
        </div>
      )) : (
        <div class="diff-screen metadata-diffs">
          <div>No Metadata changes</div>
        </div>
      )
    }

    <h4>
      <t-content-diff key="page-content">{td('page-content')}</t-content-diff>
    </h4>

    <div set:html={diff.contentDiffHtml} class="diff-screen"></div>

</Layout>

<script>
import { toast } from "studiocms:ui/components";

  const revertMetaData = document.getElementById('revert-metadata') as HTMLButtonElement;
  const revertContent = document.getElementById('revert-content') as HTMLButtonElement;
  const revertAllChanges = document.getElementById('revert-all-changes') as HTMLButtonElement;

  async function runEvent(Elm: HTMLButtonElement, event: MouseEvent) {
    event.preventDefault();
    const url = Elm.dataset.url as string;
    const id = Elm.dataset.id as string;

    toast({
      title: 'Not yet Implemented',
      description: 'This function has not yet been implemented',
      type: 'warning',
    })

    // const response = await fetch(url, {
    //   headers: {
    //     'Content-Type': 'application/json',
    //   },
    //   method: 'POST',
    //   body: JSON.stringify({ id })
    // });

    // const res = await response.json();

    // if (response.status !== 200) {
    //     toast({
    //         title: 'Error',
    //         description: res.error,
    //         type: 'danger'
    //     })
    //     return;
    // }

    // if (response.status === 200) {
    //     toast({
    //         title: 'Success',
    //         description: res.message,
    //         type: 'success'
    //     })
    //     return;
    // }
  }

  revertMetaData.addEventListener('click', async (e) => await runEvent(revertMetaData, e))

  revertContent.addEventListener('click', async (e) => await runEvent(revertContent, e))

  revertAllChanges.addEventListener('click', async (e) => await runEvent(revertAllChanges, e))
</script>

<script>
    import { 
        $i18n,
        $localeSettings,
        baseTranslation,
        defaultLang,
        documentUpdater,
        makeTranslation,
    } from 'studiocms:i18n/client';
  
    let lang = defaultLang;

    const currentPage = '@studiocms/dashboard:content-index';
    const currentDiffPage = '@studiocms/dashboard:content-diff';

    $localeSettings.subscribe((locale) => {
      lang = locale || defaultLang;
    });

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);
    const i18nDiff = $i18n(currentDiffPage, baseTranslation[currentDiffPage]);
      
    i18n.subscribe(comp => {
      documentUpdater(comp, lang)
    });
    
    if (!customElements.get('t-content-diff')) {
        customElements.define('t-content-diff', makeTranslation(currentPage, i18nDiff));
    }
</script>

<style>
  .inner-sidebar-container {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 100vh;
    height: 100%;
    padding: 1.5rem;
  }

  h4 {
    margin: 1rem auto;
    padding-left: 2rem;
  }

  .diff-screen {
    margin: 0 auto;
    width: 100%;
    max-width: 1100px;
  }

  @media screen and (max-width: 1500px) {
    .diff-screen {
        max-width: 800px;
    }
  }

  @media screen and (max-width: 1380px) {
    .diff-screen {
        max-width: 600px;
    }
  }

  .form-row {
    display: flex;
    gap: .5rem;
  }

  .metadata-diffs {
    display: flex;
    flex-direction: column;
    gap: .5rem;
    margin-top: .5rem;
  }

</style>
