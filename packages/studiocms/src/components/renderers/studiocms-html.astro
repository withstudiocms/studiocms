---
import type { CombinedPageData } from 'studiocms:sdk/types';
import { importComponentsKeys } from '../../lib/renderer/runtime.js';
import { shared } from '../../lib/renderer/shared.js';
import { createComponentProxy, transformHTML } from '../../runtime/AstroComponentProxy.js';

// Import components
const _components = await importComponentsKeys();

// Create component proxy
// @ts-expect-error - $$result is a global variable injected by Astro during compilation and not a editor-known variable
const components = createComponentProxy($$result, _components);

// Define render function
const render = async (content: string): Promise<string> => {
	return await transformHTML(content, components, shared.studiocms?.sanitize);
};

type DeepPartial<T> = {
	[P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P];
};

type Data = DeepPartial<CombinedPageData>;

interface Props {
	data: Data;
}

// Get default content
const { defaultContent } = Astro.props.data;

// Get content to render
const contentToRender = defaultContent?.content || '<h1>Error: No content found</h1>';

// Render content
const renderedContent = await render(contentToRender);
---
<Fragment set:html={renderedContent} />