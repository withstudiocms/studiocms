---
import type { CombinedPageData, FolderNode } from 'studiocms:sdk/types';
import TreeSidebarFolder from './TreeSidebarFolder.astro';
import TreeSidebarLink from './TreeSidebarLink.astro';

// Props passed to the component
interface Props {
	data: FolderNode[];
	isNewPage?: boolean;
	isNewFolder?: boolean;
}

const { data, isNewFolder, isNewPage } = Astro.props;

/**
 * Recursively sorts a tree of pages and folders by name (A to Z).
 * @param data - The array of folders and pages to sort.
 * @returns A new array with the sorted structure.
 */
function sortTree(data: FolderNode[]): FolderNode[] {
	return data
		.map((node) => ({
			...node,
			children: sortTree(node.children), // Recursively sort children
		}))
		.sort((a, b) => a.name.localeCompare(b.name)); // Sort current level by name
}

const sortedData = sortTree(data);

function getIcon(pageData: CombinedPageData | null) {
	if (pageData?.slug === 'index') {
		return 'home-modern';
	}

	if (pageData?.draft) {
		return 'pencil';
	}

	return 'document-text';
}
---

{sortedData.map(({ id, name, page, children, pageData }) => (
    page ? (
        <TreeSidebarLink 
            icon={getIcon(pageData)} 
            href={`${Astro.locals.routeMap.mainLinks.contentManagementEdit}/?edit=${id}`}
            >
            {name}
        </TreeSidebarLink>
    ) : (
        <TreeSidebarFolder 
            {name} 
            icon="folder" 
            href={`${Astro.locals.routeMap.mainLinks.contentManagementFolderEdit}/?folder=${id}`}
            >
            {children && children.length > 0 && (
                <div class="inner-sidebar-folder-child-nodes">
                    <Astro.self data={children} />
                </div>
            )}
        </TreeSidebarFolder>
    )
))}
{isNewPage && (
    <TreeSidebarLink icon="document-plus" href='#'>
        New Page...
    </TreeSidebarLink>
)}
{isNewFolder && (
    <TreeSidebarFolder name="New Folder..." icon="folder-plus" href="#" />
)}
