---
import { Icon } from 'studiocms:ui/components';
import type { HeroIconName } from '@studiocms/ui/components/Icon/iconType.js';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'a'> {
	/**
	 * ONLY USE OUTLINED ICONS! Shit will break otherwise
	 */
	icon: HeroIconName;
	href: string;
}

const { icon, ...props } = Astro.props;

const activeIcon = `${icon}-solid`;

const compId = crypto.randomUUID();
---

<tree-sidebar-link id={compId} class="inner-sidebar-link" {...props}>
  <Icon name={icon} id="not-selected-icon" class='sidebar-link-icon not-selected' width={24} height={24} />
  <Icon name={activeIcon as HeroIconName} id="selected-icon" class="sidebar-link-icon selected" width={24} height={24} />
  <span class="sidebar-link-text">
    <slot />
  </span>
</tree-sidebar-link>

<script>
  class TreeSidebarLink extends HTMLElement {
    href: string;

    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.href = this.getAttribute("href") || "#";
    }

    connectedCallback() {
      this.render();
      // Basic link semantics and keyboard focus
      this.setAttribute('role', 'link');
      if (!this.hasAttribute('tabindex')) this.tabIndex = 0;
      this.setSidebarActiveState();
      this.setupEventListeners();
    }

    render() {
      if (!this.shadowRoot) return;
      // Avoid duplicating the slot on reconnect
      if (this.shadowRoot.childNodes.length === 0) {
        const slot = document.createElement("slot");
        this.shadowRoot.appendChild(slot);
      }
    }

    setSidebarActiveState() {
      // Icons live in light DOM (projected via slot)
      const notSelectedIcon = this.querySelector('.not-selected');
      const selectedIcon = this.querySelector('.selected');

      let hrefEdit = null;
      try {
        hrefEdit = new URL(this.getAttribute('href') || this.href || '#', window.location.origin)
          .searchParams.get('edit');
      } catch {}
      const currentEdit = new URL(window.location.href).searchParams.get('edit');

      const isActive = hrefEdit !== null && currentEdit !== null && hrefEdit === currentEdit;

      this.classList.toggle('active', !!isActive);
      if (notSelectedIcon) (notSelectedIcon as HTMLElement).style.display = isActive ? 'none' : 'block';
      if (selectedIcon) (selectedIcon as HTMLElement).style.display = isActive ? 'block' : 'none';
      this.toggleAttribute('aria-current', !!isActive);
    }

    setupEventListeners() {
      this.addEventListener('click', (event) => {
        event.preventDefault();
        const url = new URL(this.href, window.location.origin);
        // Basic scheme allowlist to avoid javascript: URLs
        if (url.protocol === 'http:' || url.protocol === 'https:') {
          window.location.href = url.href;
        }
      });
      this.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.click();
        }
      });
    }
  }

  if (!customElements.get('tree-sidebar-link')) {
    customElements.define('tree-sidebar-link', TreeSidebarLink);
  }
</script>