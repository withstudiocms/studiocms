---
import { Icon } from 'studiocms:ui/components';
import type { HeroIconName } from '@studiocms/ui/components/Icon/iconType.js';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'a'> {
	/**
	 * ONLY USE OUTLINED ICONS! Shit will break otherwise
	 */
	icon: HeroIconName;
	href: string;
}

const { icon, ...props } = Astro.props;

const activeIcon = `${icon}-solid`;

const compId = crypto.randomUUID();
---

<tree-sidebar-link id={compId} class="inner-sidebar-link" {...props}>
  <Icon name={icon} id="not-selected-icon" class='sidebar-link-icon not-selected' width={24} height={24} />
  <Icon name={activeIcon as HeroIconName} id="selected-icon" class="sidebar-link-icon selected" width={24} height={24} />
  <span class="sidebar-link-text">
    <slot />
  </span>
</tree-sidebar-link>

<script>
  class TreeSidebarLink extends HTMLElement {
    href: string;

    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.href = this.getAttribute("href") || "#";
    }

    connectedCallback() {
      this.render();
      this.setSidebarActiveState();
      this.setupEventListeners();
    }

    private render() {
      if (!this.shadowRoot) return;

      const slot = document.createElement("slot");
      this.shadowRoot.appendChild(slot);
    }

    private setSidebarActiveState() {
      // Query icons from Light DOM since they're projected through the slot
      const notSelectedIcon = this.querySelector<HTMLElement>('#not-selected-icon');
      const selectedIcon = this.querySelector<HTMLElement>('#selected-icon');

      const currentQueryParams = new URL(window.location.href).searchParams.get("edit");

      if (this.href.includes(`edit=${currentQueryParams}`)) {
        this.classList.add('active');
        if (notSelectedIcon) notSelectedIcon.style.display = 'none';
        if (selectedIcon) selectedIcon.style.display = 'block';
      } else {
        this.classList.remove('active');
        if (notSelectedIcon) notSelectedIcon.style.display = 'block';
        if (selectedIcon) selectedIcon.style.display = 'none';
      }
    }

    private setupEventListeners() {
      this.addEventListener('click', (event) => {
        event.preventDefault();
        const url = new URL(this.href, window.location.origin);
        window.location.href = url.href;
      });
    }
  }

  if (!customElements.get('tree-sidebar-link')) {
    customElements.define('tree-sidebar-link', TreeSidebarLink);
  }
</script>