---
import { type UiLanguageKeys, useTranslations } from 'studiocms:i18n';
import pluginList from 'studiocms:plugins';
import { renderAugments } from 'studiocms:plugins/augments';
import { Card } from 'studiocms:ui/components/card';
import { Input } from 'studiocms:ui/components/input';
import { Select } from 'studiocms:ui/components/select';
import { TabItem, Tabs } from 'studiocms:ui/components/tabs';
import PageTypeHandler from './PageTypeHandler.astro';
import {
	categoriesOptions,
	pageTypeOptions,
	parentFolderOptions,
	tagsOptions,
	trueFalse,
} from './shared.js';

const pluginFields = pluginList.flatMap(({ pageTypes }) => pageTypes ?? []);

interface Props {
	lang: UiLanguageKeys;
}

const { lang } = Astro.props;

const t = useTranslations(lang, '@studiocms/dashboard:content-page');
---

<PageTypeHandler pluginFields={pluginFields}>
  <div
    id="create-page-container"
    data-content-management-url={Astro.locals.StudioCMS.routeMap.mainLinks
      .contentManagement}
  >
    <form
      id="page-create-form"
      action={Astro.locals.StudioCMS.routeMap.endpointLinks.content.page}
    >
      <Tabs variant={"starlight"}>
        <TabItem
          id="tab-label-basic-info"
          label={t("tab-label-basic-info")}
          icon={"heroicons:information-circle-20-solid"}
          color={"primary"}
        >
          <div class="tab-section">
            <div class="form-row">
              <Input
                label={t("input-page-title")}
                name="page-title"
                isRequired
              />
              <Input
                label={t("input-page-slug")}
                name="page-slug"
                isRequired
              />
            </div>

            <div class="form-row">
              <Input
                label={t("input-page-description")}
                name="page-description"
                isRequired
              />
              <Select
                label={t("select-page-type")}
                name="page-type"
                isRequired
                fullWidth
                defaultValue="studiocms/markdown"
                options={pageTypeOptions}
              />
            </div>

            <div class="form-row">
              <Select
                label={t("select-page-parent-folder")}
                name="parent-folder"
                fullWidth
                options={parentFolderOptions}
                defaultValue="null"
              />
              <Select
                label={t("select-augments-label")}
                name="cms-plugin-augments"
                multiple
                fullWidth
                disabled={renderAugments.length === 0}
                defaultValue={
                  renderAugments.length > 0
                    ? []
                    : ['no-augments']
                }
                options={
                  renderAugments.length > 0 
                    ? renderAugments.map(({ id }) => ({ label: id, value: id })) 
                    : [
                        { 
                          label: t("no-augments"), 
                          value: 'no-augments',
                          disabled: true,
                        }
                      ]
                }
              />
            </div>

            <div class="form-row">
              <Select
                label={t("select-page-categories")}
                name="categories"
                placeholder="Work in Progress"
                fullWidth
                options={categoriesOptions}
                disabled
              />
              <Select
                label={t("select-page-tags")}
                name="tags"
                placeholder="Work in Progress"
                fullWidth
                options={tagsOptions}
                disabled
              />
            </div>

            <div class="form-row-single">
              <div class="form-row-item">
                <Input
                  label={t("input-page-hero-image")}
                  name="page-hero-image"
                  placeholder="https://..."
                />
                <span class="form-row-item__description"
                  ><t-content-create-page key="requires-supported-frontend"
                    >{t("requires-supported-frontend")}</t-content-create-page
                  ></span
                >
              </div>
            </div>

            <div class="form-row-booleans">
              <Select
                label={t("select-page-draft")}
                name="draft"
                fullWidth
                options={trueFalse}
                disabled
                placeholder="Use submission buttons above"
              />
              <div class="form-row-item">
                <Select
                  label={t("select-page-show-author")}
                  name="show-author"
                  defaultValue="false"
                  fullWidth
                  options={trueFalse}
                />
                <span class="form-row-item__description"
                  ><t-content-create-page key="requires-supported-frontend"
                    >{t("requires-supported-frontend")}</t-content-create-page
                  ></span
                >
              </div>
              <div class="form-row-item">
                <Select
                  label={t("select-page-show-in-nav")}
                  name="show-in-nav"
                  defaultValue="false"
                  fullWidth
                  options={trueFalse}
                />
                <span class="form-row-item__description"
                  ><t-content-create-page key="requires-supported-frontend"
                    >{t("requires-supported-frontend")}</t-content-create-page
                  ></span
                >
              </div>
              <div class="form-row-item">
                <Select
                  label={t("select-page-show-contributors")}
                  name="show-contributors"
                  defaultValue="false"
                  fullWidth
                  options={trueFalse}
                />
                <span class="form-row-item__description"
                  ><t-content-create-page key="requires-supported-frontend"
                    >{t("requires-supported-frontend")}</t-content-create-page
                  ></span
                >
              </div>
            </div>

            <div id="custom-page-type-fields" style="display: none;">
              <Card fullWidth>
                <div slot="header">
                  <span>
                    <t-content-create-page key="custom-page-type-fields-header"
                      >{
                        t("custom-page-type-fields-header")
                      }</t-content-create-page
                    >
                  </span>
                </div>
                <div>
                  <t-content-create-page key="custom-page-types-description-new"
                    >{
                      t("custom-page-types-description-new")
                    }</t-content-create-page
                  >
                </div>
              </Card>
            </div>
          </div>
        </TabItem>
        <TabItem
          id="tab-label-content"
          label={t("tab-label-content")}
          icon={"heroicons:document-text-20-solid"}
          color={"success"}
        >
          <div class="tab-section">
            <div class="page-content-editor">
              <div id="page-content-editor-placeholder"></div>
            </div>
          </div>
        </TabItem>
      </Tabs>
    </form>
  </div>
</PageTypeHandler>

<script>
  import {
    $i18n,
    baseTranslation,
    makeTranslation,
    updateElmLabel,
    updateSelectElmLabel,
    updateSelectOptions,
    updateTabLabel,
    updateTrueFalseSelectOptions,
  } from "studiocms:i18n/client";
  import { $augmentI18n } from "studiocms:i18n/plugins";

  const currentPage = "@studiocms/dashboard:content-page";

  const i18n = $i18n(currentPage, baseTranslation[currentPage]);

  const augmentI18n = $augmentI18n();

  i18n.subscribe((comp) => {
    updateElmLabel("page-title", comp["input-page-title"]);
    updateElmLabel("page-slug", comp["input-page-slug"]);
    updateElmLabel("page-description", comp["input-page-description"]);
    updateElmLabel("page-hero-image", comp["input-page-hero-image"]);

    updateSelectElmLabel("page-type", comp["select-page-type"]);
    updateSelectElmLabel("show-in-nav", comp["select-page-show-in-nav"]);
    updateSelectElmLabel("parent-folder", comp["select-page-parent-folder"]);
    updateSelectElmLabel("draft", comp["select-page-draft"]);
    updateSelectElmLabel("categories", comp["select-page-categories"]);
    updateSelectElmLabel("tags", comp["select-page-tags"]);
    updateSelectElmLabel("show-author", comp["select-page-show-author"]);
    updateSelectElmLabel(
      "show-contributors",
      comp["select-page-show-contributors"],
    );
    updateSelectElmLabel("cms-plugin-augments", comp["select-augments-label"]);

    updateTabLabel("tab-label-basic-info", comp["tab-label-basic-info"]);
    updateTabLabel("tab-label-content", comp["tab-label-content"]);

    const trueFalseOptions = {
      true: comp["true-label"],
      false: comp["false-label"],
    };

    updateTrueFalseSelectOptions("show-author", trueFalseOptions);
    updateTrueFalseSelectOptions("show-contributors", trueFalseOptions);
    updateTrueFalseSelectOptions("draft", trueFalseOptions);
    updateTrueFalseSelectOptions("show-in-nav", trueFalseOptions);
    updateSelectOptions("cms-plugin-augments", {
      'no-augments': comp["no-augments"],
    });
  });

  augmentI18n.subscribe((comp) => {
    const augmentKeys = Object.keys(comp || {});
    const compTranslations = augmentKeys.reduce(
      (acc, key) => {
        acc[key] = key;
        return acc;
      },
      {} as Record<string, string>,
    );
    updateSelectOptions("cms-plugin-augments", compTranslations);
  });

  if (!customElements.get("t-content-create-page")) {
    customElements.define(
      "t-content-create-page",
      makeTranslation(currentPage, i18n),
    );
  }
</script>

<script>
  import type { tsPageDataInsert } from "studiocms:sdk/types";
  import { toast } from "studiocms:ui/components/toaster";
  import {
    formDataToRecord,
    studioCMSCreatePageDataSchema,
  } from "./formdata-utils.js";

  // get the elements
  const createPageForm = document.getElementById(
    "page-create-form",
  ) as HTMLFormElement;
  const createContainer = document.getElementById(
    "create-page-container",
  ) as HTMLDivElement;
  const draftButton = document.getElementById("draft-button") as HTMLElement;
  const publishButton = document.getElementById(
    "publish-button",
  ) as HTMLButtonElement;

  const { contentManagementUrl } = createContainer.dataset;

  createPageForm.addEventListener("submit", (e) => {
    e.preventDefault();
    console.warn(
      "Form not submitted. Please use the buttons above to save or publish the page.",
    );
  });

  const formDataKeysToPageDataKeys: Record<string, keyof tsPageDataInsert> = {
    "page-title": "title",
    "page-slug": "slug",
    "page-description": "description",
    "page-hero-image": "heroImage",
    "page-type": "package",
    "show-in-nav": "showOnNav",
    "parent-folder": "parentFolder",
    draft: "draft",
    categories: "categories",
    tags: "tags",
    "show-author": "showAuthor",
    "show-contributors": "showContributors",
  };

  async function runFormAction(
    e: Event,
    form: HTMLFormElement,
    isDraft: boolean,
  ) {
    e.preventDefault();
    const formData = new FormData(form);

    formData.set("draft", isDraft ? "true" : "false");

    const formDataObject = formDataToRecord(
      formData,
      formDataKeysToPageDataKeys,
    );

    const augments = [...formData.getAll("cms-plugin-augments")].filter((a) => a !== 'no-augments') as string[];

    const formResult = studioCMSCreatePageDataSchema.safeParse({
      ...formDataObject,
      augments,
    });

    if (!formResult.success) {
      console.error(formResult.error);
      toast({
        title: "Error",
        description:
          "There was an error with the form data. Please check the console for details.",
        type: "danger",
      });
      return;
    }

    const response = await fetch(form.action, {
      method: "POST",
      body: formResult.data ? JSON.stringify(formResult.data) : undefined,
    });

    const res = await response.json();

    if (response.status !== 200) {
      toast({
        title: "Error",
        description: res.error,
        type: "danger",
      });
      return;
    }

    if (response.status === 200) {
      toast({
        title: "Success",
        description: res.message,
        type: "success",
      });
      if (contentManagementUrl) window.location.href = contentManagementUrl;
      return;
    }
  }

  draftButton.addEventListener(
    "click",
    async (e) => await runFormAction(e, createPageForm, true),
  );

  publishButton.addEventListener(
    "click",
    async (e) => await runFormAction(e, createPageForm, false),
  );

  async function setupPageEditor() {
    const editorPlaceholder = document.getElementById(
      "page-content-editor-placeholder",
    ) as HTMLDivElement;
    editorPlaceholder.innerText =
      "Editor is not available until page creation, please create the page first!";
  }

  setupPageEditor();
</script>

<style>
  #create-page-container {
    height: 100%;
    width: 100%;
    min-width: 100%;
  }

  #page-create-form {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding-top: 0.5rem;
  }

  .tab-section {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .form-row-single {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .form-row-booleans {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    gap: 0.75rem;
  }

  .form-row,
  .form-row-single,
  .form-row-booleans {
    .form-row-item {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;

      .form-row-item__description {
        color: var(--text-muted);
        padding-left: 0.5rem;
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        font-size: 0.875rem;
      }
    }
  }

  @media screen and (max-width: 768px) {
    .form-row {
      grid-template-columns: 1fr;
    }

    .form-row-booleans {
      grid-template-columns: 1fr 1fr;
    }
  }

  .page-content-editor {
    height: 250px;
    margin-bottom: 1rem;
  }

  .page-content-editor .editor-container {
    height: 100%;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .page-content-editor #page-content {
    height: 100%;
    width: 100%;
    border: 1px solid var(--border);
    border-radius: 4px;
    padding: 1rem;
    font-size: 1rem;
    overflow-y: auto;
  }
</style>
