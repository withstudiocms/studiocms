---
import { User, VerifyEmail } from 'studiocms:auth/lib';
import type { UserSessionData } from 'studiocms:auth/lib/types';
import { StudioCMSRoutes } from 'studiocms:lib';
import { Effect } from 'effect';

interface Props {
	requiredPermission: 'owner' | 'admin' | 'editor' | 'visitor' | 'unknown';
	currentUser: UserSessionData;
}

const { requiredPermission, currentUser } = Astro.props;

let isAuthorized = await Effect.runPromise(
	User.isUserAllowed(currentUser, requiredPermission).pipe(User.Provide)
);

const emailVerified = await Effect.runPromise(
	VerifyEmail.isEmailVerified(currentUser).pipe(VerifyEmail.Provide)
);

let redirectProfile = StudioCMSRoutes.mainLinks.userProfile;

if (Astro.locals.emailVerificationEnabled && emailVerified === false) {
	isAuthorized = false;
	redirectProfile = StudioCMSRoutes.mainLinks.unverifiedEmail;
}

const redirectLogin = StudioCMSRoutes.authLinks.loginURL;
---
<login-check
    data-is_logged_in={`${currentUser.isLoggedIn}`}
    data-authorized={`${isAuthorized}`}
    data-redirect_profile={redirectProfile}
    data-redirect_login={redirectLogin}
    style="display: hidden;" 
></login-check>

<script>
    if (!customElements.get('login-check')) {
        class LoginCheck extends HTMLElement {
            constructor() {
                super();
                const authorized = this.dataset.authorized;
                const isLoggedIn = this.dataset.is_logged_in;
                const redirectProfile = this.dataset.redirect_profile;
                const redirectLogin = this.dataset.redirect_login;

                if (isLoggedIn === 'false') {
                    window.location.href = redirectLogin!;
                }

                if (window.location.pathname === redirectProfile) {
                    return;
                }

                if (authorized === 'false') {
                    window.location.href = redirectProfile!;
                }
            }
        }

        customElements.define('login-check', LoginCheck);
    }
</script>