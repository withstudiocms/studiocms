---
import { type UiLanguageKeys, useTranslations } from 'studiocms:i18n';
import { SDKCoreJs, runSDK } from 'studiocms:sdk';
import { Button, Divider, Dropdown, Icon, Input } from 'studiocms:ui/components';
import UserListItem from './UserListItem.astro';

interface Props {
	lang: UiLanguageKeys;
}

const { lang } = Astro.props;

const Users = await runSDK(SDKCoreJs.GET.users.all());

const safeUsers: {
	id: string;
	name: string;
	email: string | null;
	avatar: string | null;
	username: string;
	permissionsData:
		| {
				user: string;
				rank: string;
		  }
		| undefined;
}[] = Users.map(({ avatar, email, id, name, username, permissionsData }) => {
	return { avatar, email, id, name, username, permissionsData };
});

const t = useTranslations(lang, '@studiocms/dashboard:user-mngmt-sidebar');
---
<div class="inner-user-sidebar-header">
  <Button variant="solid" color="primary" size='md' id="back-to-outer" class="mobile-btn mid-size-btn">
    <Icon name="arrow-left" width={24} height={24} slot="start-content" />
  </Button>
  <form id="search-form">
    <Input name='search' placeholder={t('input-placeholder-search')} type='search' required />
  </form>
  <Dropdown
    id='create-user-dropdown'
    options={[
      { label: t('dropdown-create-user'), icon: 'user-plus', value: 'new-user' },
      { label: t('dropdown-create-invite'), icon: 'inbox-arrow-down', value: 'new-invite' },
    ]}
    align={'end'}
    offset={8}
  >
    <Button variant="solid" color="primary" size='md' class="add-button">
      <Icon name="plus" width={24} height={24} />
    </Button>
  </Dropdown>
  <Button variant="solid" color="primary" size='md' class="mobile-btn" id="show-page">
    <Icon name="x-mark" width={24} height={24} slot="start-content" />
  </Button>
</div>

<Divider background={'background-step-1'}></Divider>

<div id="user-list"
    class="inner-sidebar-users scrollbar" 
    data-userpartial={Astro.locals.routeMap.endpointLinks.partials.userListItems}
    data-users={JSON.stringify(safeUsers)}
    >
    { Users.map((user) => <UserListItem user={user} />) }
</div>

<div id="search-list"
    class="inner-sidebar-users scrollbar" 
    style="display: none;"
    data-userpartial={Astro.locals.routeMap.endpointLinks.partials.userListItems}
    data-users={JSON.stringify(safeUsers)}
    >
</div>

<div id="new-users-links"
  style="display: none;"
  data-create_user={Astro.locals.routeMap.endpointLinks.newUsers.create}
  data-create_invite={Astro.locals.routeMap.endpointLinks.newUsers.invite}
  ></div>

<script>
    import { 
        $i18n,
        baseTranslation,
        updateElmPlaceholder,
    } from 'studiocms:i18n/client';

    const dropdownKeys: Record<string, string> = {
        'new-user': 'dropdown-create-user',
        'new-invite': 'dropdown-create-invite',
    }

    const getDropdownOptions = () => {
        const dropdownElm = document.getElementById('create-user-dropdown-dropdown') as HTMLUListElement;
        const options = dropdownElm?.querySelectorAll('.sui-dropdown-option') as NodeListOf<HTMLLIElement>;

        const returnData: Record<string, HTMLSpanElement> = {};

        for (const option of options) {
            const value = option.dataset.value as string;
            const key = dropdownKeys[value];

            if (!key) continue;

            const SelectedElm = (option.querySelector('.sui-dropdown-line-container') as HTMLDivElement).querySelector('span');

            if (!SelectedElm) continue;

            returnData[key] = SelectedElm;
        }

        return returnData;
    }
  
    const currentPage = '@studiocms/dashboard:user-mngmt-sidebar';
  
    const i18n = $i18n(currentPage, baseTranslation[currentPage]);
      
    i18n.subscribe(comp => {
        updateElmPlaceholder('search', comp['input-placeholder-search']);

        const dropdownOptions = getDropdownOptions();

        for (const [key, elm] of Object.entries(dropdownOptions)) {
            // @ts-ignore
            elm.textContent = comp[key];
        }
    });
</script>

<script>
    import { DropdownHelper, ModalHelper, toast } from 'studiocms:ui/components';
  
    const createNewDropdown = new DropdownHelper('create-user-dropdown');
    const createNewUserModal = new ModalHelper('create-new-user-modal');
    const createUserInviteModal = new ModalHelper('create-user-invite-modal');

    const inviteResponseModal = new ModalHelper('invite-response-modal');

    const inviteResponsePlaceholder = document.getElementById('invite-response-placeholder') as HTMLElement;

    const newUsersLinks = document.getElementById('new-users-links') as HTMLDivElement;

    const createNewUserLink = newUsersLinks.dataset.create_user as string;
    const createUserInviteLink = newUsersLinks.dataset.create_invite as string;
    
    createNewDropdown.registerClickCallback((value) => {
        if (value === 'new-user') {
            createNewUserModal.show();
        } else if (value === 'new-invite') {
            createUserInviteModal.show();
        }
    });

    createNewUserModal.registerConfirmCallback(async (formData) => {
        const username = formData?.get('username');
        const email = formData?.get('email');
        const password = formData?.get('password');
        const displayname = formData?.get('display_name');
        const rank = formData?.get('rank');

        const data = {
            username,
            email,
            password,
            displayname, 
            rank
        };

        const apiResponse = await fetch(createNewUserLink, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        const response = await apiResponse.json();

        if (!apiResponse.ok) {
            console.error('Failed to create new user');
            toast({
                title: 'Failed to create new user',
                description: response.error,
                type: 'danger',
            })
            return;
        }

        createNewUserModal.hide();
        toast({
            title: 'User created successfully.',
            type: 'success',
        });
    });

    createUserInviteModal.registerConfirmCallback(async (formData) => {
        const username = formData?.get('username');
        const email = formData?.get('email');
        const displayname = formData?.get('display_name');
        const rank = formData?.get('rank');

        const data = {
            username,
            email,
            displayname, 
            rank,
            originalUrl: window.location.origin
        };

        const apiResponse = await fetch(createUserInviteLink, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        const response = await apiResponse.json();

        if (!apiResponse.ok) {
            console.error('Failed to create new user invite');
            toast({
                title: 'Failed to create new user invite',
                description: response.error,
                type: 'danger',
            })
            return;
        }

        inviteResponsePlaceholder.innerText = response.message;

        createUserInviteModal.hide();
        inviteResponseModal.show();
    });
</script>

<script>
    import DOMPurify from "dompurify";
    import Fuse from "fuse.js";

    type User = {
            id: string;
            name: string;
            email: string | null;
            avatar: string | null;
            username: string;
            permissionsData:
                | {
                        user: string;
                        rank: string;
                }
                | undefined;
        };

    type Users = User[];

    function clearSearchParams(userListElm: HTMLDivElement, ActualList: HTMLDivElement) {
        const url = new URL(window.location.href);
        url.searchParams.delete('search');
        window.history.pushState({}, '', url);
        userListElm.style.display = 'none';
        ActualList.style.display = 'flex';
    }

    async function runSearch(form: HTMLFormElement, userListElm: HTMLDivElement, users: Users, userListItemsPartial: string, ActualList: HTMLDivElement) {
        const formData = new FormData(form);
        
        const searchTerm = DOMPurify.sanitize(formData.get('search')?.toString() || '');

        if (!searchTerm || searchTerm.length === 0) return;

        const url = new URL(window.location.href);
        url.searchParams.set('search', searchTerm);
        window.history.pushState({}, '', url);

        const searchList = users;

        const fuse = new Fuse(searchList, {
            keys: ['name', 'username'],
            isCaseSensitive: false,
            threshold: 0.5,
        });

        const results = fuse.search(searchTerm);

        const res = await fetch(userListItemsPartial, {
            method: 'POST',
            body: JSON.stringify({ users: results.map((item) => item.item), searchQuery: searchTerm }),
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (!res.ok) {
            console.error('Failed to fetch search list');
            return [];
        }

        const html = await res.text();

        userListElm.innerHTML = html;
        userListElm.style.display = 'flex';
        ActualList.style.display = 'none';
    }

    async function searchSetup() {
        const searchForm = document.getElementById('search-form') as HTMLFormElement;
        const searchInput = searchForm.querySelector('input[name="search"]') as HTMLInputElement;

        const ActualUserList = document.querySelector('#user-list') as HTMLDivElement;
        
        const userListElm = document.querySelector('#search-list') as HTMLDivElement;
        const users: Users = JSON.parse(userListElm.dataset.users!);
        const userListItemsPartial = userListElm.dataset.userpartial!;

        const url = new URL(window.location.href);

        const searchTerm = url.searchParams.get('search');

        if (searchTerm) {
            const input = searchInput;
            input.value = searchTerm;
            await runSearch(searchForm, userListElm, users, userListItemsPartial, ActualUserList);
        }

        searchForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            await runSearch(searchForm, userListElm, users, userListItemsPartial, ActualUserList);
        });

        let timeout: NodeJS.Timeout;
        searchInput.addEventListener('input', () => {
            clearTimeout(timeout);
            timeout = setTimeout(async () => await runSearch(searchForm, userListElm, users, userListItemsPartial, ActualUserList), 500);
        });

        searchInput.addEventListener('search', () => {
            clearSearchParams(userListElm, ActualUserList);
        });
    }

searchSetup();
</script>
