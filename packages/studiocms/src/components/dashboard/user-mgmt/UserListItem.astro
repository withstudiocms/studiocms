---
import { useTranslations } from 'studiocms:i18n';
import { Divider } from 'studiocms:ui/components/divider';
import { Icon } from 'studiocms:ui/components/icon';
import type { AvailablePermissionRanks } from '@withstudiocms/auth-kit/types';
import User from '../../shared/SSRUser.astro';

interface Props {
	user: {
		id: string;
		name: string;
		email: string | null;
		avatar: string | null;
		username: string;
		permissionsData:
			| {
					user: string;
					rank: AvailablePermissionRanks;
			  }
			| undefined;
	};
	searchQuery?: string;
}

const { user, searchQuery } = Astro.props;

const lang = Astro.locals.StudioCMS.defaultLang;
const t = useTranslations(lang, '@studiocms/dashboard:user-component');

const userListItemHref = new URL(
	Astro.locals.StudioCMS.routeMap.mainLinks.userManagementEdit,
	Astro.url.origin
);
userListItemHref.searchParams.set('user', user.id);
if (searchQuery) {
	userListItemHref.searchParams.set('search', searchQuery);
}
const userListItemHrefString = userListItemHref.toString();

const id = `user-mngmt-user-account-${user.id || 'unknown'}`;

const permissionLevel = user.permissionsData?.rank ?? 'unknown';
---

<user-list-item class="sidebar-user" href={userListItemHrefString} data-selector-id={id} data-permission-level={permissionLevel}>
    <User
        id={id}
        name={user.name}
        avatar={user.avatar ?? undefined}
        description={t(permissionLevel)}
    />
    <Icon name="heroicons:chevron-right" width={24} height={24} />
</user-list-item>
<Divider background={"background-step-1"} />

<script>
  import {
      $i18n,
      baseTranslation,
  } from 'studiocms:i18n/client';

  const currentPage = '@studiocms/dashboard:user-component';

  const i18n = $i18n(currentPage, baseTranslation[currentPage]);

    class UserListItem extends HTMLElement {
        href: string;
        permissionLevel: "admin" | "editor" | "owner" | "visitor" | "unknown";
        selectorId: string;

        constructor() {
            super();
            this.attachShadow({ mode: "open" });
            this.href = this.getAttribute("href") || "#";
            this.permissionLevel = (this.getAttribute("data-permission-level") || "unknown") as "admin" | "editor" | "owner" | "visitor" | "unknown";
            this.selectorId = this.getAttribute("data-selector-id") || "unknown";
        }

        connectedCallback() {
            this.render();
            this.setSidebarActiveState();
            this.setupEventListeners();
        }

        private render() {
            if (!this.shadowRoot) return;

            const slot = document.createElement("slot");
            this.shadowRoot.appendChild(slot);

            i18n.subscribe(comp => {
              const userContainer = this.querySelector(`#${this.selectorId}`) as HTMLDivElement;
              const userTextContent = userContainer.querySelector('.sui-text-content') as HTMLDivElement;
              const userDescription = userTextContent.querySelector('.sui-description') as HTMLDivElement;
              userDescription.textContent = comp[this.permissionLevel];
            })
        }

        private setSidebarActiveState() {
            const userLinks = document.querySelectorAll(".sidebar-user");
            const currentQueryParams = new URL(
                window.location.href,
            ).searchParams.get("user");

            userLinks.forEach((el) => {
                el.classList.remove("active");
            });

            if (this.href.includes(`user=${currentQueryParams}`)) {
                this.classList.add("active");
            }
        }

        private setupEventListeners() {
            this.addEventListener('click', (event) => {
                const e = event as MouseEvent;
                const url = new URL(this.href, window.location.origin);
                const isHttp = url.protocol === 'http:' || url.protocol === 'https:';
                const target = this.getAttribute('target');
                const openInNewTab = target === '_blank' || e.ctrlKey || e.metaKey || e.button === 1;

                if (!isHttp) return;

                if (openInNewTab) {
                    // Preserve default middle-click behavior if this were a native link
                    e.preventDefault();
                    window.open(url.href, '_blank', 'noopener,noreferrer');
                    return;
                }

                // Primary (left) click same-tab navigation
                if (e.button === 0) {
                    e.preventDefault();
                    window.location.href = url.href;
                }
            });
        }
    }

    if (!customElements.get("user-list-item")) {
        customElements.define("user-list-item", UserListItem);
    }
</script>
