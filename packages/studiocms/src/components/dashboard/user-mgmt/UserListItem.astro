---
import { getLabelForPermissionLevel } from 'studiocms:auth/utils/getLabelForPermissionLevel';
import { Divider, Icon, User } from 'studiocms:ui/components';

interface Props {
	user: {
		id: string;
		name: string;
		email: string | null;
		avatar: string | null;
		username: string;
		permissionsData:
			| {
					user: string;
					rank: string;
			  }
			| undefined;
	};
	searchQuery?: string;
}

const { user, searchQuery } = Astro.props;

const userListItemHref = new URL(
	Astro.locals.StudioCMS.routeMap.mainLinks.userManagementEdit,
	Astro.url.origin
);
userListItemHref.searchParams.set('user', user.id);
if (searchQuery) {
	userListItemHref.searchParams.set('search', searchQuery);
}
const userListItemHrefString = userListItemHref.toString();
---

<user-list-item class="sidebar-user" href={userListItemHrefString}>
    <User
        name={user.name}
        avatar={user.avatar ?? undefined}
        description={getLabelForPermissionLevel(user.permissionsData?.rank!)}
        loading="eager"
    />
    <Icon name="chevron-right" width={24} height={24} />
</user-list-item>
<Divider background={"background-step-1"} />

<script>
    class UserListItem extends HTMLElement {
        href: string;

        constructor() {
            super();
            this.attachShadow({ mode: "open" });
            this.href = this.getAttribute("href") || "#";
        }

        connectedCallback() {
            this.render();
            this.setSidebarActiveState();
            this.setupEventListeners();
        }

        private render() {
            if (!this.shadowRoot) return;

            const slot = document.createElement("slot");
            this.shadowRoot.appendChild(slot);
        }

        private setSidebarActiveState() {
            const userLinks = document.querySelectorAll(".sidebar-user");
            const currentQueryParams = new URL(
                window.location.href,
            ).searchParams.get("user");

            userLinks.forEach((el) => {
                el.classList.remove("active");
            });

            if (this.href.includes(`user=${currentQueryParams}`)) {
                this.classList.add("active");
            }
        }

        private setupEventListeners() {
            this.addEventListener("click", (event) => {
                event.preventDefault();
                const url = new URL(this.href, window.location.origin);
                window.location.href = url.href;
            });
        }
    }

    if (!customElements.get("user-list-item")) {
        customElements.define("user-list-item", UserListItem);
    }
</script>
