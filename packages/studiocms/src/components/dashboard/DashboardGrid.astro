---
import { User } from 'studiocms:auth/lib';
import type { UserSessionData } from 'studiocms:auth/lib/types';
import dashboardGridItems from 'studiocms:components/dashboard-grid-items';
import type { UiLanguageKeys } from 'studiocms:i18n';
import type { SiteConfigCacheObject } from 'studiocms:sdk/types';
import { Center } from 'studiocms:ui/components';
import { Effect } from '../../effect.js';
import DashboardGridItem from './DashboardGridItem.astro';

interface Props {
	lang: UiLanguageKeys;
	config: SiteConfigCacheObject;
	currentUser: UserSessionData | null;
}

const {
	lang,
	config: { data },
	currentUser,
} = Astro.props as Props;

let gridItems = dashboardGridItems;

if (((data.gridItems as string[]) ?? []).length > 0) {
	gridItems = dashboardGridItems.filter((item) =>
		((data.gridItems as string[]) ?? []).includes(item.name)
	);
}

const checkAllowed = (perm: 'owner' | 'admin' | 'editor' | 'visitor' | undefined) =>
	Effect.gen(function* () {
		const user = yield* User;
		return user.isUserAllowed(currentUser, perm ?? 'unknown');
	}).pipe(User.Provide);
---

<div class="dashboard-grid-container">
	{
		gridItems.length > 0 ? (
			gridItems.map(async (item) => {
				if (item.requiresPermission) {
					const allowed = await Effect.runPromise(checkAllowed(item.requiresPermission));
					if (allowed) {
						return <DashboardGridItem {...item} {lang} />;
					}
				} else {
					return <DashboardGridItem {...item} {lang} />;
				}
			})
		) : (
			<Center>
				<p>There is nothing to display</p>
			</Center>
		)
	}
</div>
