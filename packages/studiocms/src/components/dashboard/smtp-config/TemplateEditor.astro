---
/**

This Template Editor is built using the Ace Editor (https://ace.c9.io/), which is
licensed under the BSD 3-Clause License:

Copyright (c) 2010, Ajax.org B.V.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Ajax.org B.V. nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

import { Icon } from 'studiocms:ui/components';
import { Button } from 'studiocms:ui/components/button';

interface Props {
	templateKeys: string[];
	templates: Record<string, string>;
	defaultTemplates: Record<string, string>;
	t: (key: 'preview-button-title') => string;
}

const { templateKeys, templates, defaultTemplates, t } = Astro.props;

const templateSaveAPIEndpoint = '/api/smtp/templates';
---
<Button 
    id="template-preview-button" 
    variant="outlined"
    color="primary"
    size="sm" 
    title={t('preview-button-title')}
>
    <Icon 
        slot="start-content" 
        name="heroicons:document-magnifying-glass-20-solid" 
        width={20} 
        height={20} 
    />
</Button>
<div 
    id="template-editor" 
    data-current-selection="none" 
    data-templates={JSON.stringify(templates)}
    data-template-keys={JSON.stringify(templateKeys)}
    data-default-templates={JSON.stringify(defaultTemplates)}
    data-save-endpoint={templateSaveAPIEndpoint}
></div>

<script>
    import {
        $i18n,
        baseTranslation,
    } from "studiocms:i18n/client";
    import templateEngine from '@withstudiocms/template-lang'
    import { ModalHelper } from 'studiocms:ui/components/modal';
    import * as ace from 'ace-builds';
    import { toast } from 'studiocms:ui/components/toaster';
    import "ace-builds/src-noconflict/mode-handlebars";
    import "ace-builds/src-noconflict/theme-cloud_editor";
    import "ace-builds/src-noconflict/theme-cloud_editor_dark";

    // --- INTERNATIONALIZATION SETUP ---
    const currentPage = "@studiocms/dashboard:smtp";
    const i18n = $i18n(currentPage, baseTranslation[currentPage]);

    let t: Record<string, string> = {};
    i18n.subscribe((comp) => {
        t = comp;

        // Update any dynamic text if necessary
        document.getElementById('template-preview-button')?.setAttribute('title', comp['preview-button-title']);
    })

    // --- UTILITY FUNCTIONS ---
    const $ = (selector: string): HTMLElement | null =>
        document.querySelector(selector);
    const $$ = (selector: string): NodeListOf<HTMLElement> =>
        document.querySelectorAll(selector);

    // --- CONSTANTS ---
    const allTemplateButtons = $$('.template-selectors button');
    const saveButton = $('#save-template-button') as HTMLElement;
    const resetButton = $('#reset-template-button') as HTMLElement;
    const templateEditor = $('#template-editor') as HTMLElement;
    const previewModal = new ModalHelper('template-editor-preview-modal');
    const previewModalButton = $('#template-preview-button') as HTMLElement;
    const previewIframe = $('#template-editor-preview') as HTMLIFrameElement;

    const templates = JSON.parse(templateEditor.dataset.templates || '{}') as Record<string, string>;
    const currentTemplates = JSON.parse(templateEditor.dataset.templateKeys || '[]') as string[];
    const defaultTemplates = JSON.parse(templateEditor.dataset.defaultTemplates || '{}') as Record<string, string>;
    const saveEndpoint = templateEditor.dataset.saveEndpoint as string;

    // --- Function Utils ---
    function updateButtonState(button: HTMLElement, isActive: boolean) {
        if (isActive) {
            button.classList.add('primary');
            button.classList.remove('default');
        } else {
            button.classList.remove('primary');
            button.classList.add('default');
        }
    }

    function getCurrentTemplate(): string {
        return templateEditor.dataset.currentSelection || 'none';
    }

    function displaySuccessToastThenReload(message: string) {
        toast({
            title: t['success-label'],
            type: 'success',
            description: message
        });
        setTimeout(() => {
            window.location.reload();
        }, 3000); // Delay to allow user to read the toast message
    }

    async function saveTemplate(templateKey: string, content: string) {
        if (!templateKey || templateKey === 'none') {
            toast({
                title: t['error-label'],
                type: 'danger',
                description: t['template-save-button-error']
            });
            return;
        }

        const allTemplates = { ...templates, [templateKey]: content };

        try {
            const response = await fetch(saveEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ templates: allTemplates }),
            });

            if (!response.ok) {
                throw new Error(`${t['template-editor-save-failed']}: ${response.statusText}`);
            }

            displaySuccessToastThenReload(t['template-editor-save-success']);
        } catch (_error) {
            toast({
                title: t['error-label'],
                type: 'danger',
                description: t['template-editor-save-unknown']
            });
        }
    }

    // --- ACE EDITOR SETUP ---
    const currentTheme = window.theme?.getTheme() || 'dark';
    const aceTheme = currentTheme === 'light' ? 'cloud_editor' : 'cloud_editor_dark';

    const editor = ace.edit('template-editor', {
        mode: 'ace/mode/handlebars', // Using Handlebars as its a close match to our templating language
        theme: `ace/theme/${aceTheme}`,
        value: `<!-- ${t['template-editor-preloaded-content']} -->`,
        fontSize: '14px',
        tabSize: 2,
        useSoftTabs: true,
        showPrintMargin: false,
        wrap: true,
        useWorker: false,
        displayIndentGuides: true,
        enableAutoIndent: true,
    });

    // --- EDITOR UTILS ---

    function updateEditorContent(content: string) {
        editor.setValue(content, -1); // -1 moves cursor to start
        editor.focus();
    }

    // --- THEME MANAGEMENT ---

    // Listen for theme changes and update Ace Editor theme accordingly
    const observer = new MutationObserver(() => {
        const newTheme = window.theme?.getTheme() || 'dark';
        const newAceTheme = newTheme === 'light' ? 'cloud_editor' : 'cloud_editor_dark';
        editor.setTheme(`ace/theme/${newAceTheme}`);
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['data-theme'] });

    // --- TEMPLATE BUTTON EVENT LISTENERS ---
    currentTemplates.forEach((template) => {
        const button = $(`#template-btn-${template}`);
        if (button) {
            button.addEventListener('click', () => {
                // Update button states
                allTemplateButtons.forEach((btn) => {
                updateButtonState(btn, btn.id === button.id);
                });

                // Load the selected template content into the editor
                const templateContent = templates[template] || `<!-- ${t['template-editor-not-found']} -->`;
                updateEditorContent(templateContent);

                // Update current selection data attribute
                templateEditor.dataset.currentSelection = template;
            });
        }
    });

    // --- SAVE BUTTON EVENT LISTENER ---
    saveButton.addEventListener('click', async () => {
        const currentTemplate = getCurrentTemplate();
        if (currentTemplate && templates[currentTemplate] !== undefined) {
            const updatedContent = editor.getValue();
            await saveTemplate(currentTemplate, updatedContent);
        } else {
            toast({
                title: t['error-label'],
                type: 'danger',
                description: t['template-save-reset-button-error']
            });
        }
    });

    // --- RESET BUTTON EVENT LISTENER ---
    resetButton.addEventListener('click', () => {
        const currentTemplate = getCurrentTemplate();
        if (currentTemplate && defaultTemplates[currentTemplate]) {

        if (!confirm(t['template-reset-button-confirm'])) {
            return;
        }
        
        const defaultContent = defaultTemplates[currentTemplate];
        updateEditorContent(defaultContent);
        } else {
        toast({
            title: t['error-label'],
            type: 'danger',
            description: t['template-save-reset-button-error']
        });
        }
    });

  // --- PREVIEW BUTTON EVENT LISTENER ---
    type EngineContext = {
        site: {
            title: string;
            description?: string;
            icon?: string;
        };
        data: Record<string, string>;
    };

    const mockContext: EngineContext = {
        site: {
            title: 'Example Site',
            description: 'This is an example site description.',
            icon: 'https://studiocms.dev/favicon.svg',
        },
        data: {
            name: 'John Doe',
            link: '#fake-link',
            title: 'Welcome to Our Service',
            message: 'This is a sample notification message.',
        },
    };

    const engine = new templateEngine({ strict: true });

    previewModalButton.addEventListener('click', () => {
        const currentTemplate = getCurrentTemplate();
        if (currentTemplate && templates[currentTemplate] !== undefined) {
            const templateContent = editor.getValue();

            const renderedContent = engine.render(templateContent, mockContext);

            // Create a Blob URL for the template content
            const blob = new Blob([renderedContent], { type: 'text/html' });
            const url = URL.createObjectURL(blob);

            // Set the iframe src to the Blob URL
            previewIframe.src = url;

            // Open the modal
            previewModal.show();
        } else {
            toast({
                title: t['error-label'],
                type: 'danger',
                description: t['template-preview-button-error']
            });
        }
    })
</script>

<style is:global>
    #template-editor-card {
        padding: 0;

        .sui-card-body {
            height: 100%;
            padding: 0 !important;
            overflow: hidden !important;
            position: relative;
        }
    }
</style>

<style>
    #template-editor {
        width: 100%;
        height: 100%;
        min-width: 100%;
        min-height: 100%;
        background-color: var(--background-step-1);
        border-radius: var(--radius-md);
        overflow: hidden;
    }

    #template-preview-button {
        position: absolute;
        top: 0.5rem;
        right: 1.25rem;
        z-index: 10;
        padding: 0.5rem;
    }
</style>