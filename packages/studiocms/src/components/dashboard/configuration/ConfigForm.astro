---
import { validImages } from 'studiocms:auth/utils/validImages';
import dashboardGridItems from 'studiocms:components/dashboard-grid-items';
import { useTranslations } from 'studiocms:i18n';
import type { SiteConfigCacheObject } from 'studiocms:sdk/types';
import { Card, Divider, Input, Select, Toggle } from 'studiocms:ui/components';
import LoginPreview from './LoginPreview.astro';

interface Props {
	config: SiteConfigCacheObject;
}

const { config } = Astro.props as Props;

const { data } = config;

const ogSelectOptions = validImages.map(({ label, name: value }) => ({ label, value }));

const currentLoginPageBg = validImages.find(
	({ name }) => name === data.loginPageBackground && name !== 'custom'
);

const currentlyEnabledGridItems: string[] = (data.gridItems as string[]) ?? [];

interface PreGridItem {
	name: string;
	label: string;
}

interface AllGridItems extends PreGridItem {
	enabled: boolean;
}

const allGridItems: PreGridItem[] = dashboardGridItems.map((item) => ({
	name: item.name,
	label: item.header?.title ?? item.name,
}));

const gridItemOptions: AllGridItems[] = allGridItems.map(({ name, label }) => {
	if (currentlyEnabledGridItems.length === 0) {
		return {
			enabled: true,
			name,
			label,
		};
	}

	return {
		enabled: currentlyEnabledGridItems.includes(name),
		name,
		label,
	};
});

const lang = Astro.locals.StudioCMS.defaultLang;
const t = useTranslations(lang, '@studiocms/dashboard:configuration');
---

<form id="site-config-form" action={Astro.locals.StudioCMS.routeMap.endpointLinks.config}>
    <div class="form-content">

        <div class="form-row">
            <Input label={t('input-site-title')} name='site-title' placeholder='My Awesome Website' value={data.title} isRequired />
            <Input label={t('input-site-description')} name='site-description' placeholder='Built with StudioCMS!' value={data.description} isRequired />
        </div>

        <div class="form-row">
            <Input label={t('input-og-image')} name="default-og-image" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.defaultOgImage} />
            <Input label="Site Icon (Public facing Favicon)" name="site-icon" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.siteIcon} />
        </div>

        <div class="form-row">
            <Select label={t('select-page-diff-tracking')} name="diff-enabled" defaultValue={`${data.enableDiffs}`} options={[{ label: 'Enabled', value: 'true' }, { label: 'Disabled', value: 'false' }]} fullWidth />
            <Input label={t('input-diff-tracking-limit')} name="diff-per-page" placeholder="10" value={data.diffPerPage} />
        </div>

        <div class="form-row">
            <Select label={t('select-smtp-mailer')} name="enable-mailer" defaultValue={`${data.enableMailer}`} options={[{ label: 'Enabled', value: 'true' }, { label: 'Disabled', value: 'false' }]} fullWidth />
            <Select label={t('select-hide-default-index')} name="hide-default-index" defaultValue={`${data.hideDefaultIndex}`} options={[{ label: 'Enabled', value: 'true' }, { label: 'Disabled', value: 'false' }]} fullWidth />
        </div>

        <Divider />

        <span>
            <t-config-form key="dashboard-grid-label">{t('dashboard-grid-label')}</t-config-form>
        </span>

        <div class="grid-items-container">
            {
                gridItemOptions.map(({ enabled, label, name }) => (
                    <Card style="background-color: hsl(var(--background-step-2));">
                        <Toggle {label} {name} color='primary' defaultChecked={enabled} />
                    </Card>
                ))
            }
        </div>

        <Divider />

        <div class="form-row">
            <Select label={t('select-login-page-bg')} name='login-page-background' defaultValue={data.loginPageBackground} options={ogSelectOptions} fullWidth />
            <Input label={t('input-custom-login-page')} name="login-page-background-custom" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.loginPageCustomImage} disabled={data.loginPageBackground !== 'custom'} />
        </div>

        <LoginPreview light={currentLoginPageBg?.light} dark={currentLoginPageBg?.dark} />

    </div>
</form>

<script>
    import { 
        $i18n,
        $localeSettings,
        baseTranslation,
        defaultLang,
        makeTranslation,
        updateElmLabel,
        updateSelectElmLabel,
    } from 'studiocms:i18n/client';

    const currentPage = '@studiocms/dashboard:configuration';

    let lang = defaultLang;

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);

    $localeSettings.subscribe((locale) => {
        lang = locale || defaultLang;
    });
    
    i18n.subscribe(comp => {
        updateElmLabel('site-title', comp['input-site-title']);
        updateElmLabel('site-description', comp['input-site-description']);
        updateElmLabel('default-og-image', comp['input-og-image']);
        updateElmLabel('site-icon', comp['input-site-icon']);
        updateElmLabel('diff-per-page', comp['input-diff-tracking-limit']);
        updateElmLabel('login-page-background-custom', comp['input-custom-login-page']);
        updateSelectElmLabel('login-page-background', comp['select-login-page-bg']);
        updateSelectElmLabel('diff-enabled', comp['select-page-diff-tracking']);
        updateSelectElmLabel('enable-mailer', comp['select-smtp-mailer']);
        updateSelectElmLabel('hide-default-index', comp['select-hide-default-index'])
    });
    
    if (!customElements.get('t-config-form')) {
        customElements.define('t-config-form', makeTranslation(currentPage, i18n));
    }
</script>

<script>
    import { toast } from "studiocms:ui/components";
        const configForm = document.querySelector('#site-config-form') as HTMLFormElement;

        configForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(configForm);

            // Get dashboard grid items
            const gridItems = Array.from(configForm.querySelectorAll('input[type="checkbox"]') as NodeListOf<HTMLInputElement>).map((input) => {
                return {
                    name: input.name,
                    enabled: input.checked,
                }
            });

            const enabledGridItems = gridItems.filter((item) => item.enabled).map((item) => item.name);

            const data = {
                title: formData.get('site-title') as string,
                description: formData.get('site-description') as string,
                defaultOgImage: formData.get('default-og-image') ?? null,
                siteIcon: formData.get('site-icon') ?? null,
                loginPageBackground: formData.get('login-page-background') as string,
                loginPageCustomImage: formData.get('login-page-background-custom') ?? null,
                enableDiffs: formData.get('diff-enabled') === 'true',
                diffPerPage: parseInt(formData.get('diff-per-page') as string),
                gridItems: enabledGridItems,
                enableMailer: formData.get('enable-mailer') === 'true',
                hideDefaultIndex: formData.get('hide-default-index') === 'true'
            }

            console.log(data);

            const response = await fetch(configForm.action, {
                method: 'POST',
                body: JSON.stringify(data),
                headers: {
                    'Content-Type': 'application/json',
                },
            })
            const res = await response.json();

            if (response.status !== 200) {
                toast({
                    title: 'Error',
                    description: res.error,
                    type: 'danger'
                })
            }

            if (response.status === 200) {
                toast({
                    title: 'Success',
                    description: res.message,
                    type: 'success'
                })
            }
        });
</script>

<style>
    .form-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    @media screen and (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
    }

    .grid-items-container {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
    }
</style>