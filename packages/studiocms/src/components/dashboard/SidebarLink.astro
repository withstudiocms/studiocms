---
import { Icon } from 'studiocms:ui/components';
import type { HeroIconName } from '@studiocms/ui/components/Icon/iconType.js';
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'a'> {
	/**
	 * ONLY USE OUTLINED ICONS! Shit will break otherwise
	 */
	icon: HeroIconName;
	href: string;
}

const { icon, ...props } = Astro.props;

const activeIcon = `${icon}-solid`;

const compId = crypto.randomUUID();
---
<sidebar-link id={compId} class="sidebar-link" data-dashboard-index={Astro.locals.StudioCMS.routeMap.mainLinks.dashboardIndex} {...props}>
  <Icon name={icon} id="not-selected-icon" class='sidebar-link-icon not-selected' width={24} height={24} />
  <Icon name={activeIcon as HeroIconName} id="selected-icon" class="sidebar-link-icon selected" width={24} height={24} />
  <span class="sidebar-link-text">
    <slot />
  </span>
</sidebar-link>

<script>
  class SidebarLink extends HTMLElement {
    href: string;
    dashboardIndex: string;

    constructor() {
      super();
      this.attachShadow({ mode: "open" });
      this.href = this.getAttribute("href") || "#";
      this.dashboardIndex = this.getAttribute("data-dashboard-index") || "";
    }

    connectedCallback() {
      this.render();
      // Link semantics and keyboard access
      this.setAttribute('role', 'link');
      if (!this.hasAttribute('tabindex')) this.tabIndex = 0;
      this.setSidebarActiveState();
      this.setupEventListeners();
    }

    render() {
      if (!this.shadowRoot) return;
      if (this.shadowRoot.childNodes.length === 0) {
        const slot = document.createElement("slot");
        this.shadowRoot.appendChild(slot);
      }
    }

    setupEventListeners() {
      this.addEventListener('click', (event) => {
        event.preventDefault();
        const url = new URL(this.href, window.location.origin);
        if (url.protocol === 'http:' || url.protocol === 'https:') {
          window.location.href = url.href;
        }
      });
      this.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.click();
        }
      });
    }

    setSidebarActiveState() {
      // Light DOM icons projected through the slot
      const notSelectedIcon = this.querySelector('.not-selected');
      const selectedIcon = this.querySelector('.selected');

      const normalize = (p: string) => p.replace(/\/+$/, '') || '/';
      const windowLocation = normalize(window.location.pathname);
      let elemPath = normalize(new URL(this.href, window.location.origin).pathname);
      const webDashboardIndex = normalize(new URL(window.location.origin + this.dashboardIndex).pathname);

      // Match exact or sub-path segments only (avoid false positives like "/user" vs "/user-settings")
      const startsWithSeg = (path: string, base: string) => {
        if (base === '/' ) return path === '/';
        return path === base || path.startsWith(base + '/');
      };
      const isActive = startsWithSeg(windowLocation, elemPath) && elemPath !== webDashboardIndex;

      this.classList.toggle('active', isActive);
      if (notSelectedIcon) (notSelectedIcon as HTMLElement).style.display = isActive ? 'none' : 'block';
      if (selectedIcon) (selectedIcon as HTMLElement).style.display = isActive ? 'block' : 'none';
      this.toggleAttribute('aria-current', isActive);
  }
 
    static get observedAttributes() { return ['href']; }
    attributeChangedCallback(name: string, _oldValue: any, newValue: string) {
      if (name === 'href') {
        this.href = newValue || '#';
        this.setSidebarActiveState();
      }
    }
}

  if (!customElements.get('sidebar-link')) {
    customElements.define('sidebar-link', SidebarLink);
  }
</script>
