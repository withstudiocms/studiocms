---
import studioCMS_SDK_Cache from 'studiocms:sdk/cache';
import { Button } from 'studiocms:ui/components';
import currentVersion from 'studiocms:version';
import { compare } from 'semver';

const latestVersion = await studioCMS_SDK_Cache.GET.latestVersion();

const comparison = compare(currentVersion, latestVersion.version);

const status = comparison === -1 ? 'outdated' : comparison === 0 ? 'latest' : 'future';
---
<Button size="sm" variant="flat" class="version-container" id="version-modal-trigger" title="Click for more information" aria-label="Click for more information">
    <code class="version-check">
        <span>v{currentVersion}</span>
        {status && <span class="status" class:list={[status]} />}
    </code>
</Button>

<script>
    import { ModalHelper } from 'studiocms:ui/components';
    import { dateTimeListener } from '../../component-scripts/dateTimeListener';
    import { dateWithTimeAndZone } from '../../component-scripts/dateWithTimeAndZone';
    import { timeAgo } from '../../component-scripts/timeAgo';
    import type { VersionCacheObject } from 'studiocms:sdk/cache';

    function setupVersionChecker() {
        const reloadButton = document.getElementById('version-modal-reload') as HTMLButtonElement;
        const timeElem = document.getElementById('version-modal-last-checked-date') as HTMLTimeElement;
        const latestUpdateCheck = document.getElementById('latest-update-check') as HTMLSpanElement;
        const latestVersionElem = document.getElementById('latest-version') as HTMLElement;


        if (document.getElementById('version-modal-trigger')) {
                dateTimeListener('version-modal-last-checked-date')
        }

        document.addEventListener('astro:page-load', async () => {
            new ModalHelper('version-modal', 'version-modal-trigger');
        })

        reloadButton.addEventListener('click', async () => {
                const response = await fetch(reloadButton.dataset.link!);
                if (response.ok) {
                    const data: { success: boolean, latestVersion: VersionCacheObject } = await response.json();

                    if (data.success) {
                        latestVersionElem.textContent = `v${data.latestVersion.version}`;
                        timeElem.dateTime = new Date(data.latestVersion.lastCacheUpdate).toISOString();
                        timeElem.textContent = dateWithTimeAndZone(new Date(data.latestVersion.lastCacheUpdate));
                        latestUpdateCheck.textContent = `(${timeAgo(new Date(data.latestVersion.lastCacheUpdate))})`;
                    }
                }
            });
    }

    document.addEventListener('astro:page-load', setupVersionChecker);
    setupVersionChecker();
</script>

<style>
    .version-container {
        width: 100%;
    }

    .inline-title {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        align-items: center;
        justify-content: start;
    }
</style>
