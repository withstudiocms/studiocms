---
import changelog from 'studiocms:changelog';
import { StudioCMSRoutes } from 'studiocms:lib';
import { StudioCMSRenderer } from 'studiocms:renderer';
import studioCMS_SDK_Cache from 'studiocms:sdk/cache';
import { Modal } from 'studiocms:ui/components';
import currentVersion from 'studiocms:version';
import { compare } from 'semver';
import { dateWithTimeAndZone } from '../../component-scripts/dateWithTimeAndZone';
import { timeAgo } from '../../component-scripts/timeAgo';
import VersionCheckChangelog from './VersionCheckChangelog.astro';

const latestVersion = await studioCMS_SDK_Cache.GET.latestVersion();
const lastChecked = latestVersion.lastCacheUpdate;
const comparison = compare(currentVersion, latestVersion.version);
const status = comparison === -1 ? 'outdated' : comparison === 0 ? 'latest' : 'future';
---

<Modal id="version-modal" size="lg">
    <h2 slot="header" class="inline-title">
        <span>Version Information</span>
        <button data-link={StudioCMSRoutes.sdk.updateLatestVersionCache} 
            id="version-modal-reload"
            class="reload-button" 
            title="Check for updates" 
            aria-label="Check for updates"
            ><span class="reload"></span>
        </button>
    </h2>

    <div>
        <div class="version-modal-top-row">
            <div class="version-modal-col">
                <span class="version-modal-col-title">Current Version</span>
                <code class="version-modal-col-value">v{currentVersion}</code>
            </div>

            <div class="version-modal-col">
                <span class="version-modal-col-title">Latest Version</span>
                <code id="latest-version" class="version-modal-col-value">v{latestVersion.version}</code>
            </div>

            <div class="version-modal-col">
                <span class="version-modal-col-title">Last Update Check</span>
                <span class="version-modal-col-value">
                    <time id="version-modal-last-checked-date" datetime={lastChecked.toISOString()}>{dateWithTimeAndZone(lastChecked)}</time>
                    <span id="latest-update-check" class="latest-update-check">({timeAgo(lastChecked)})</span>
                </span>
            </div>
        </div>

        <div class="version-modal-release-notes">
            <div><StudioCMSRenderer content={changelog} /></div>
            <span class="release-notes-read-more">
                <VersionCheckChangelog link="/studiocms_api/sdk/full-changelog.json"><span class="read-more-text">Full Changelog</span></VersionCheckChangelog>
            </span>
        </div>

        <div class="version-modal-links">
            <span class="version-modal-row-title">View on</span>
            <a href="https://github.com/withstudiocms/studiocms/releases" 
                target="_blank" 
                class="version-link"
                title="View Releases on GitHub"
                aria-label="View Releases on GitHub"
                ><span class="brand--github"></span>
            </a>
            <a href="https://npm.im/studiocms" 
                target="_blank" 
                class="version-link"
                title="View on NPM"
                aria-label="View on NPM"
                ><span class="brand--npm"></span>
            </a>
        </div>
    </div>
</Modal>

<style>
    .inline-title {
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        align-items: center;
        justify-content: start;
    }

    .version-modal-top-row {
        display: grid;
        grid-template-columns: 1fr 1fr 2fr;
        gap: 1rem;
    }

    @media screen and (max-width: 768px) {
        .version-modal-top-row {
            grid-template-columns: 1fr;
        }
    }

    .release-notes-read-more {
        display: flex;
        flex-direction: row-reverse;
        margin-top: 1rem;
        font-size: 1rem;

        .read-more-text {
            color: hsl(var(--text-muted));
            text-align: end;
            font-weight: 400;
            cursor: pointer;
        }

        .read-more-text:hover {
            color: hsl(var(--primary-base));
            text-decoration: underline;
        }

        a {
            color: hsl(var(--text-muted));
            text-decoration: none;
            font-weight: 700;
        }

        a:hover {
            color: hsl(var(--primary-base));
        }
    }

    .version-modal-col {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .version-modal-col-title {
        font-weight: 500;
    }

    .version-modal-row-title {
        font-weight: 500;
        color: hsl(var(--text-muted));
    }

    .version-modal-col-value {
        font-weight: 500;
        height: 16px;
        display: flex;
        align-items: center;
        gap: .5rem;
    }

    #version-modal-last-checked-date {
        font-weight: 500;
        font-family: monospace;
        font-size: 1em;
        height: 15px;
    }

    .version-modal-release-notes {
        border: 1px solid hsl(var(--border));
        border-radius: 0.5rem;
        padding: 1rem;
        overflow: auto;
        max-height: 50vh;
        margin-top: 1rem;
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

    .latest-update-check {
        color: hsl(var(--text-muted));
        font-size: .7em;
        font-weight: 700;
        text-align: center;
    }

    .version-link {
        text-decoration: none !important;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    a:-webkit-any-link:hover {
        text-decoration: underline;
        color: hsl(var(--primary-base));
    }

    a:-webkit-any-link {
        color: hsl(var(--text-muted));
        text-decoration: none;
    }

    .reload-button {
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 24px;
        height: 24px;
        border-radius: 50%;
        transition: background-color 0.15s ease-in-out;
    }

    .reload-button:hover {
        background-color: hsl(var(--default-hover));
    }

    .reload {
        display: inline-block;
        width: 16px;
        height: 16px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99' /%3E%3C/svg%3E");
        background-size: contain;
        background-repeat: no-repeat;
    }
</style>

<script>
    import { ModalHelper } from 'studiocms:ui/components';
    import { dateTimeListener } from '../../component-scripts/dateTimeListener';
    import { dateWithTimeAndZone } from '../../component-scripts/dateWithTimeAndZone';
    import { timeAgo } from '../../component-scripts/timeAgo';
    import type { VersionCacheObject } from 'studiocms:sdk/cache';

    function setupVersionModal() {
        const reloadButton = document.getElementById('version-modal-reload') as HTMLButtonElement;
        const timeElem = document.getElementById('version-modal-last-checked-date') as HTMLTimeElement;
        const latestUpdateCheck = document.getElementById('latest-update-check') as HTMLSpanElement;
        const latestVersionElem = document.getElementById('latest-version') as HTMLElement;

        if (document.getElementById('version-modal-last-checked-date')) {
            dateTimeListener('version-modal-last-checked-date');
        }

        document.addEventListener('astro:page-load', async () => {
            new ModalHelper('version-modal', 'version-modal-trigger');
        });

        if (reloadButton) {
            reloadButton.addEventListener('click', async () => {
                const response = await fetch(reloadButton.dataset.link!);
                if (response.ok) {
                    const data: { success: boolean, latestVersion: VersionCacheObject } = await response.json();

                    if (data.success) {
                        latestVersionElem.textContent = `v${data.latestVersion.version}`;
                        timeElem.dateTime = new Date(data.latestVersion.lastCacheUpdate).toISOString();
                        timeElem.textContent = dateWithTimeAndZone(new Date(data.latestVersion.lastCacheUpdate));
                        latestUpdateCheck.textContent = `(${timeAgo(new Date(data.latestVersion.lastCacheUpdate))})`;
                    }
                }
            });
        }
    }

    document.addEventListener('astro:page-load', setupVersionModal);
    setupVersionModal();
</script> 