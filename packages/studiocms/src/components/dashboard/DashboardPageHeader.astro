---
import type { UserSessionData } from 'studiocms:auth/lib/types';
import { type UiLanguageKeys, useTranslations } from 'studiocms:i18n';
import { Button, Icon, Modal, Textarea } from 'studiocms:ui/components';
import UserName from './UserName.astro';

interface Props {
	lang: UiLanguageKeys;
	currentUser: UserSessionData;
}

const { lang, currentUser } = Astro.props as Props;

const t = useTranslations(lang, '@studiocms/dashboard:index');
---

<header class="index-page-header">
  <div class="page-title-container">
    <Button color='primary' id='nav-open' class='mobile-btn'>
      <Icon name="bars-3" height={24} width={24} />
    </Button>
    <h1 class="page-title">
      <t-dashboard-header key="welcome-title">{t("welcome-title")}</t-dashboard-header>, <UserName {currentUser} />.
    </h1>
  </div>
  <div class="page-actions-container">
    <Button color='primary' variant='flat' as="a" href={'https://chat.studiocms.dev'} target='_blank' rel='noreferrer,noopener'>
      <Fragment set:html={`<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 16 16"><path fill="currentColor" d="M13.545 2.907a13.2 13.2 0 0 0-3.257-1.011a.05.05 0 0 0-.052.025c-.141.25-.297.577-.406.833a12.2 12.2 0 0 0-3.658 0a8 8 0 0 0-.412-.833a.05.05 0 0 0-.052-.025c-1.125.194-2.22.534-3.257 1.011a.04.04 0 0 0-.021.018C.356 6.024-.213 9.047.066 12.032q.003.022.021.037a13.3 13.3 0 0 0 3.995 2.02a.05.05 0 0 0 .056-.019q.463-.63.818-1.329a.05.05 0 0 0-.01-.059l-.018-.011a9 9 0 0 1-1.248-.595a.05.05 0 0 1-.02-.066l.015-.019q.127-.095.248-.195a.05.05 0 0 1 .051-.007c2.619 1.196 5.454 1.196 8.041 0a.05.05 0 0 1 .053.007q.121.1.248.195a.05.05 0 0 1-.004.085a8 8 0 0 1-1.249.594a.05.05 0 0 0-.03.03a.05.05 0 0 0 .003.041c.24.465.515.909.817 1.329a.05.05 0 0 0 .056.019a13.2 13.2 0 0 0 4.001-2.02a.05.05 0 0 0 .021-.037c.334-3.451-.559-6.449-2.366-9.106a.03.03 0 0 0-.02-.019m-8.198 7.307c-.789 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.45.73 1.438 1.613c0 .888-.637 1.612-1.438 1.612m5.316 0c-.788 0-1.438-.724-1.438-1.612s.637-1.613 1.438-1.613c.807 0 1.451.73 1.438 1.613c0 .888-.631 1.612-1.438 1.612"/></svg>`} slot='start-content' />
      <t-dashboard-header key="title-button:discord">{t("title-button:discord")}</t-dashboard-header>
    </Button>
    <Button color='success' variant='flat' id="feedback-button">
      <Icon name='chat-bubble-oval-left-ellipsis' width={24} height={24} />
      <t-dashboard-header key="title-button:feedback">{t("title-button:feedback")}</t-dashboard-header>
    </Button>
  </div>
</header>

<Modal 
  id='feedback-modal' 
  size='lg' 
  isForm
  cancelButton={{ label: 'Cancel', color: 'default' }}
  actionButton={{ label: 'Confirm', color: 'primary' }}
  >
  <h2 slot='header'>Give Feedback</h2>
  <div>
    <Textarea id="feedback-text" name="feedback-text" label="What's on your mind?" placeholder="Type your feedback here..." rows={5} required />
  </div>
</Modal>

<script>
  import { ModalHelper, toast } from 'studiocms:ui/components';

  const ENDPOINT = "https://api.feelback.dev/v0";

  async function sendFeelback(contentSetId: string, key: string, value: string) {
      const response = await fetch(ENDPOINT + "/feelbacks/create", {
          method: "POST",
          headers: { "content-type": "application/json" },
          body: JSON.stringify({
              contentSetId,
              key,
              value
          })
      });

      // returns the feelbackId and, if enabled, a revocable token
      return await response.json();
  }

  const modal = new ModalHelper('feedback-modal', 'feedback-button');
  modal.registerCancelCallback(() => {
    modal.hide();
  });

  modal.registerConfirmCallback(async (data) => {
    if (!data) {
      toast({
        title: 'Error',
        description: 'Please provide feedback before submitting.',
        type: 'danger',
      })
      return;
    }
    const feedbackText = data.get('feedback-text')?.toString();
    if (!feedbackText) {
      toast({
        title: 'Error',
        description: 'Please provide feedback before submitting.',
        type: 'danger',
      })
      return;
    }

    const response = await sendFeelback('0ed28bbd-7aac-4ced-ae8d-56b8086c44d7', 'general-feedback-dashboard', feedbackText);

    if (response.feelbackId && response.feelbackId.length > 0) {
      toast({
        title: 'Success',
        description: 'Your feedback has been sent successfully.',
        type: 'success',
      });
    } else {
      toast({
        title: 'Error',
        description: 'There was an error sending your feedback. Please try again later.',
        type: 'danger',
      });
    }
  });
</script>

<script>
    import { 
        $i18n,
        baseTranslation,
        makeTranslation,
    } from 'studiocms:i18n/client';

    const currentPage = '@studiocms/dashboard:index';

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);

    if (!customElements.get('t-dashboard-header')) {
        customElements.define('t-dashboard-header', makeTranslation(currentPage, i18n));
    }
</script>
<style>
  .index-page-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin-bottom: .5rem;
    width: 100%;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .page-title-container {
    display: flex;
    flex-direction: row;
    gap: 1rem;
    width: fit-content;
  }
  
  .page-title {
    display: block;
    width: fit-content;
    margin: 0;
  }
  
  .page-actions-container {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 1rem;
    margin-left: auto;
  }
</style>
