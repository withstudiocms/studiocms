---
import type { UserSessionData } from 'studiocms:auth/lib/types';
import { dashboardConfig } from 'studiocms:config';
import { useTranslations } from 'studiocms:i18n';
import pluginList from 'studiocms:plugins';
import type { VersionCacheObject } from 'studiocms:sdk/types';
import { Button, Divider, Dropdown, Group, Icon } from 'studiocms:ui/components';
import Footer from './Footer.astro';
import SidebarLink from './SidebarLink.astro';
import SidebarPluginLink from './SidebarPluginLink.astro';
import StudioCMSLogo from './StudioCMSLogo.astro';
import UserAccount from './sidebar/UserAccount.astro';
import VersionCheck from './sidebar/VersionCheck.astro';
import { getSidebarLinks } from './sidebarConfig.js';

const { versionCheck } = dashboardConfig;
const lang = Astro.locals.defaultLang;
const t = useTranslations(lang, '@studiocms/dashboard:sidebar');
const sidebar = getSidebarLinks(lang);

interface Props {
	currentUser: UserSessionData;
	latestVersion: VersionCacheObject;
}

const { currentUser: userData, latestVersion } = Astro.props as Props;

const { isEditor, isAdmin, isOwner } = Astro.locals.userPermissionLevel;

const filteredPluginList = pluginList.filter((plugin) => !!plugin.settingsPage);
---

<div class="sidebar-links-container">
  <div class="sidebar-header">
    <div class="sidebar-header-text">
      <StudioCMSLogo class={'sidebar-logo'} />
      <span class="sidebar-title">StudioCMS</span>
    </div>
    <div class="sidebar-subtitle">
      <Group>
        { versionCheck && <VersionCheck {latestVersion} /> }
        <Button size='sm' variant="outlined" color={'default'} id={'studiocms-theme-toggle'}>
          <div id="dark-content">
            <Icon name='moon-16-solid' width={16} height={16} slot="dark" />
          </div>
          <div id="light-content">
            <Icon name='sun-16-solid' width={16} height={16} slot="light" />
          </div>
          <div id="fallback-content">
            <Icon name='arrow-path-16-solid' width={16} height={16} slot="fallback" />
          </div>
        </Button>
      </Group>
      <Button color='primary' size='sm' id='nav-close' class='mobile-btn mid-size-btn'>
        <Icon name="x-mark" height={16} width={16} />
      </Button>
    </div>
  </div>
  
  <Divider background='background-step-1'>
    <t-sidebar key="category-1-header">{t("category-1-header")}</t-sidebar>
  </Divider>
  
  <div class="sidebar-link-group">
    {
      sidebar.baseLinks.map(({ href, icon, title, key }) => {
        if (title) {
          return <SidebarLink {icon} {href}>{title}</SidebarLink>
        }
        if (key) {
          // @ts-ignore
          return <SidebarLink {icon} {href}><t-sidebar key={key}>{t(key)}</t-sidebar></SidebarLink>
        }
      })
    }
  
    { isEditor && sidebar.editorLinks.map(({ href, icon, title, key }) => {
      if (title) {
        return <SidebarLink {icon} {href}>{title}</SidebarLink>
      }
      if (key) {
        // @ts-ignore
        return <SidebarLink {icon} {href}><t-sidebar key={key}>{t(key)}</t-sidebar></SidebarLink>
      }
    })}
  
  </div>

  {isAdmin && (
    <Divider background='background-step-1'>
      <t-sidebar key="category-2-header">{t('category-2-header')}</t-sidebar>
    </Divider>
    <div class="sidebar-link-group">
      {
        isOwner && sidebar.ownerLinks.map(({ href, icon, title, key }) => {
          if (title) {
            return <SidebarLink {icon} {href}>{title}</SidebarLink>
          }
          if (key) {
            // @ts-ignore
            return <SidebarLink {icon} {href}><t-sidebar key={key}>{t(key)}</t-sidebar></SidebarLink>
          }
        })
      }
      {
        sidebar.adminLinks.map(({ href, icon, title, key }) => {
          if (title) {
            return <SidebarLink {icon} {href}>{title}</SidebarLink>
          }
          if (key) {
            // @ts-ignore
            return <SidebarLink {icon} {href}><t-sidebar key={key}>{t(key)}</t-sidebar></SidebarLink>
          }
        })
      }
    </div>
    <Divider background='background-step-1'>
      <t-sidebar key="category-3-header">{t('category-3-header')}</t-sidebar>
    </Divider>
    <div class="sidebar-link-group">
      { filteredPluginList.length > 0 
        ? filteredPluginList.map(({ identifier, name }) => (
          <SidebarPluginLink 
            identifier={identifier}
            name={name}
          />
        )) 
        : ( 
          <span class="empty-placeholder-span">
            <t-sidebar key="category-3-empty-placeholder">
              {t('category-3-empty-placeholder')}
            </t-sidebar>
          </span>
        )}
    </div>
  )}

</div>  

<div>
  <Dropdown 
    id='sidebar-user-dropdown'
    options={[
      { label: t("user-dropdown:settings"), icon: "user", value: Astro.locals.routeMap.mainLinks.userProfile },
      { label: t("user-dropdown:view-site"), icon: "globe-alt", value: Astro.locals.routeMap.mainLinks.baseSiteURL },
      { label: t("user-dropdown:logout"), icon: "arrow-left-start-on-rectangle", color: 'danger', value: Astro.locals.routeMap.authLinks.logoutURL },
    ]}
    offset={8}
    >

    <div class="user-dropdown-trigger-container">
      <UserAccount currentUser={userData} />
    </div>
    
  </Dropdown>

  <Footer />
</div>

<div style="display: none;" id="dropdown-user-options"
  data-settings={Astro.locals.routeMap.mainLinks.userProfile}
  data-view-site={Astro.locals.routeMap.mainLinks.baseSiteURL}
  data-logout={Astro.locals.routeMap.authLinks.logoutURL}
></div>

<script>
    import { 
        $i18n,
        baseTranslation,
        makeTranslation,
    } from 'studiocms:i18n/client';

    const dropdownUserOptions = document.getElementById('dropdown-user-options') as HTMLDivElement;

    const userDropdownOptions = {
        settings: dropdownUserOptions.dataset.settings,
        viewSite: dropdownUserOptions.dataset.viewSite,
        logout: dropdownUserOptions.dataset.logout,
    };

    const getDropdownUserOptionsElms = () => {
      const DropdownElm = document.getElementById('sidebar-user-dropdown-dropdown') as HTMLUListElement;

      const DropdownOptions = DropdownElm.querySelectorAll('.sui-dropdown-option') as NodeListOf<HTMLLIElement>;

      const Options: { 
        settings: HTMLSpanElement | null; 
        viewSite: HTMLSpanElement | null; 
        logout: HTMLSpanElement | null; 
      } = {
        settings: null,
        viewSite: null,
        logout: null,
      };

      for (const Elm of DropdownOptions) {
        const value = Elm.dataset.value;

        const SelectedValue = Object.entries(userDropdownOptions).find(([key, val]) => val === value)?.[0] as 'settings' | 'viewSite' | 'logout';

        if (!SelectedValue) {
          continue;
        }

        if (userDropdownOptions[SelectedValue]) {

          const SelectedElm = (Elm.querySelector('.sui-dropdown-line-container') as HTMLDivElement).querySelector('span');

          Options[SelectedValue] = SelectedElm;
        }
      }

      return Options;
    }

    const currentPage = '@studiocms/dashboard:sidebar';

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);
    
    i18n.subscribe(comp => {
        const DropdownUserOptions = getDropdownUserOptionsElms();

        if (DropdownUserOptions.settings) {
          DropdownUserOptions.settings.textContent = comp['user-dropdown:settings'];
        }

        if (DropdownUserOptions.viewSite) {
          DropdownUserOptions.viewSite.textContent = comp['user-dropdown:view-site'];
        }

        if (DropdownUserOptions.logout) {
          DropdownUserOptions.logout.textContent = comp['user-dropdown:logout'];
        }
    });

    if (!customElements.get('t-sidebar')) {
        customElements.define('t-sidebar', makeTranslation(currentPage, i18n));
    }
</script>

<script>
  import { DropdownHelper } from "studiocms:ui/components";
  import { ThemeHelper } from '@studiocms/ui/utils/ThemeHelper.js';

  function setup() {
    const userDropdown = new DropdownHelper('sidebar-user-dropdown', true);

    userDropdown.registerClickCallback((value) => {
      window.location.href = value;
    });

    const themeToggle = document.getElementById('studiocms-theme-toggle');
    const themeHelper = new ThemeHelper();
    
    themeHelper.registerToggle(themeToggle);

    themeHelper.onThemeChange((newTheme) => {
      localStorage.setItem('studiocms-theme-preference', newTheme);
    });
  }
  
  document.addEventListener('astro:page-load', setup);
  setup();
</script>

<style>
  #nav-close {
    display: none;
  }

  @media screen and (max-width: 840px) {
    #nav-close {
      display: flex;
      margin-left: .75rem;
    }
  }

  .sidebar-link-group {
    display: flex;
    flex-direction: column;
    gap: .375rem;
    width: 100%;
  }

  .sidebar-link-group.hidden {
    display: none;
  }

  .empty-placeholder-span {
    width: 100%;
    text-align: center;
    color: hsl(var(--text-muted));
    font-size: .875em;
  }

  .user-dropdown-trigger-container {
    width: calc(280px - 3rem);
    cursor: pointer;
    border: 1px solid hsl(var(--border));
    padding: .5rem;
    border-radius: .5rem;
    transition: all .15s ease;
  }

  .user-dropdown-trigger-container:hover {
    background-color: hsla(var(--border) / .5);
  }

  .sidebar {
    justify-content: space-between;
  }

  .sidebar-links-container {
    gap: .75rem;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
</style>
