---
import type { UserSessionData } from 'studiocms:auth/lib/types';
import { useTranslations } from 'studiocms:i18n';
import { Button } from 'studiocms:ui/components/button';
import { Card } from 'studiocms:ui/components/card';
import { Icon } from 'studiocms:ui/components/icon';
import { Input } from 'studiocms:ui/components/input';

interface Props {
	currentUser: UserSessionData | null;
}

const { currentUser: data } = Astro.props as Props;

const userHasNoPassword = data?.user?.password === null;

const lang = Astro.locals.StudioCMS.defaultLang;
const t = useTranslations(lang, '@studiocms/dashboard:profile');
---

<Card fullWidth as="form" id="password-update-form" class="password-update-form" action={Astro.locals.StudioCMS.routeMap.endpointLinks.profile}>

    <div slot="header">
        <h2><t-profile-password key="user-password-header">{t('user-password-header')}</t-profile-password></h2>
    
        <div class="form-header">
            <Button 
                type='submit' 
                variant='solid' 
                color='primary' 
                disabled={userHasNoPassword}
                size='sm'
                >
                <Icon slot="start-content" name="heroicons:check" width={24} height={24} />
                <t-profile-password key="user-password-save-button">
                    {t('user-password-save-button')}
                </t-profile-password>
            </Button> 
        </div>
    </div>

    {userHasNoPassword && ( 
        <p>
            <t-profile-password key="user-password-no-password">{t('user-password-no-password')}</t-profile-password>
        </p>
    )}

    <div class="password-form-entries">

        <Input 
            label={t('user-password-current')} 
            type='password'
            placeholder='********' 
            isRequired={!userHasNoPassword}
            disabled={userHasNoPassword}
            name='current-password' 
            autocomplete='current-password'
            />

        <Input 
            label={t('user-password-new')} 
            type='password'
            placeholder='********' 
            isRequired 
            autocomplete='password new_password'
            name='new-password' 
            />

        <Input 
            label={t('user-password-confirm')}  
            type='password'
            placeholder='********' 
            isRequired 
            autocomplete='password new_password'
            name='confirm-new-password' 
            />

    </div>
</Card>

<script>
    import { 
        $i18n,
        baseTranslation,
        makeTranslation,
        updateElmLabel,
    } from 'studiocms:i18n/client';

    const currentPage = '@studiocms/dashboard:profile';

    const i18n = $i18n(currentPage, baseTranslation[currentPage]);
    
    i18n.subscribe(comp => {
        updateElmLabel('current-password', comp['user-password-current']);
        updateElmLabel('new-password', comp['user-password-new']);
        updateElmLabel('confirm-new-password', comp['user-password-confirm']);
    });

    if (!customElements.get('t-profile-password')) {
        customElements.define('t-profile-password', makeTranslation(currentPage, i18n));
    }
</script>

<script>
    import { toast } from "studiocms:ui/components/toaster";
        const passwordUpdateForm = document.getElementById('password-update-form') as HTMLFormElement;

        passwordUpdateForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const formData = new FormData(passwordUpdateForm);

            const data = {
                currentPassword: formData.get('current-password') ?? null,
                newPassword: formData.get('new-password') as string,
                confirmNewPassword: formData.get('confirm-new-password') as string,
            }

            const response = await fetch(passwordUpdateForm.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ mode: 'password', data })
            })

            const res = await response.json();

            if (response.status !== 200) {
                toast({
                    title: 'Error',
                    description: res.error,
                    type: 'danger'
                })
            }

            if (response.status === 200) {
                toast({
                    title: 'Success',
                    description: res.message,
                    type: 'success'
                })
            }
        });
</script>

<style>
    .password-update-form {
        position: relative;
    }

    .password-update-form .password-form-entries {
        display: grid;
        gap: 1rem;
        grid-template-columns: 1fr 1fr 1fr;

        @media (max-width: 1024px) {
            grid-template-columns: 1fr 1fr;
        }

        @media (max-width: 768px) {
            grid-template-columns: 1fr;
        }
    }

    .form-header {
        display: block;
        position: absolute;
        top: 1rem;
        right: 1rem;
    }
</style>
