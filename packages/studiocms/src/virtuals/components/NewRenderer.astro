---
import { pluginRenderers } from 'studiocms:plugins/renderers';
import * as renderers from 'virtual:studiocms/plugins/renderers';
import type { SSRResult } from 'astro';
import type { PluginPageTypeRendererProps, PluginRenderer } from '../../types.js';
import renderFn from './renderFn.js';

interface Props extends PluginPageTypeRendererProps {}

const { data } = Astro.props as Props;

if (!data) return;

const renderer = pluginRenderers.find((r) => r.pageType === data.package);

if (!renderer) {
	console.warn(
		`Renderer for page type "${data.package}" not found. Ensure the plugin is correctly registered and the renderer exists.`
	);
	return;
}

const RendererModule: PluginRenderer = renderers[renderer.safePageType as keyof typeof renderers];

// Check if RendererModule has a name property to verify it's a valid interface
if (!RendererModule.name) {
	console.error(`Renderer module for page type "${data.package}" not found in renderers.`);
	return;
}

const renderedContent = await renderFn({
	content: data.defaultContent?.content || '<h1>Error: No content found</h1>',
	// TODO Setup Augment system for plugins to use
	augments: [],
	renderOpts: {
		// @ts-expect-error - $$result is a global variable injected by Astro during compilation and not a editor-known variable
		result: $$result as SSRResult,
		sanitizeOpts: RendererModule.sanitizeOpts,
		preRenderer: RendererModule.renderer,
	},
});
---

<Fragment set:html={renderedContent} />
