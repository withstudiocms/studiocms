// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Layout Container tests > AuthLayout Container > render component 1`] = `
"<html lang="en"> <head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><meta name="generator" content="Astro v0.0.0-test"><meta name="generator" content="StudioCMS v0.0.0-test"><meta name="generator" content="StudioCMS UI v0.0.0-test"><link rel="icon" href="https://cdn.studiocms.dev/favicon.svg" type="image/svg+xml"><link rel="icon" href="https://cdn.studiocms.dev/favicon-light.png" type="image/png" media="(prefers-color-scheme: dark)"><link rel="icon" href="https://cdn.studiocms.dev/favicon-dark.png" type="image/png" media="(prefers-color-scheme: light)"><title>Test Title</title><meta name="title" content="Test Title"><meta name="description" content="Test Description"><meta name="theme-color" content="#a581f3"><script>
    window.theme ??= (() => {
        const defaultTheme = "system";
        const storageKey = "studiocms-theme-preference";
        const store =
            typeof localStorage !== "undefined"
            ? localStorage
            : { getItem: () => null, setItem: () => {} };
    
        const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");
        let systemTheme = mediaMatcher.matches ? "light" : "dark";
        mediaMatcher.addEventListener("change", (event) => {
            systemTheme = event.matches ? "light" : "dark";
            applyTheme(theme.getTheme());
        });
    
        function applyTheme(theme) {
            const resolvedTheme = theme === "system" ? systemTheme : theme;
            document.documentElement.dataset.theme = resolvedTheme;
            document.dispatchEvent(
            new CustomEvent("theme-changed", {
                detail: { theme, systemTheme, defaultTheme },
            })
            );
        }
    
        function setTheme(theme = defaultTheme) {
            store.setItem(storageKey, theme);
            applyTheme(theme);
        }
    
        function getTheme() {
            return store.getItem(storageKey) || defaultTheme;
        }
    
        function getSystemTheme() {
            return systemTheme;
        }
    
        function getDefaultTheme() {
            return defaultTheme;
        }
    
        return { setTheme, getTheme, getSystemTheme, getDefaultTheme };
    })();
    theme.setTheme(theme.getTheme());
</script> <script type="module" src="/mock/path/AuthLayout.astro?astro&type=script&index=0&lang.ts"></script></head> <body> <div id="sui-toaster" class="top-center" ,> <div id="sui-toast-drawer" data-offset="32" data-gap="8" data-duration="4000" style="top: 32px;left: 50%; transform: translateX(-50%);--gap: 8px;padding-left: 32px;padding-right: 32px;"></div> </div> <script type="module" src="/mock/path/AuthLayout.astro?astro&type=script&index=0&lang.ts"></script> <main> <div id="canvas-container"> <div class="fallback-container" id="fallback-config" data-config="{&#34;loginPageBackground&#34;:&#34;studiocms-curves&#34;,&#34;loginPageCustomImage&#34;:null}"> <svg class="static-logo" width="755" height="792" viewBox="0 0 755 792" fill="none" xmlns="http://www.w3.org/2000/svg"> <rect x="295" width="460" height="466" rx="32" fill="currentColor"></rect> <path d="M272 434V166H180C162.327 166 148 180.327 148 198V597C148 614.673 162.327 629 180 629H577.5C595.173 629 609.5 614.673 609.5 597V490H328C297.072 490 272 464.928 272 434Z" fill="currentColor"></path> <path d="M124 597V329H32C14.3269 329 0 343.327 0 361V760C0 777.673 14.3269 792 32 792H429.5C447.173 792 461.5 777.673 461.5 760V653H180C149.072 653 124 627.928 124 597Z" fill="currentColor"></path> </svg>  <img src="/mock/path/AuthLayout.astro?href=%2Fmock%2Fpath%2Fimage.webp&#38;w=1920&#38;h=1080&#38;q=100&#38;f=webp" data-image-component="true" alt="A fallback image displaying because the interactive wallpaper couldn't be loaded." loading="lazy" decoding="async" fetchpriority="auto" width="1920" height="1080" class="fallback-image"> <script type="module" src="/mock/path/AuthLayout.astro?astro&type=script&index=0&lang.ts"></script> </div> </div> <div class="login-form-container">   <div class="sui-divider-container"> <hr class="sui-divider-line"> <div class="sui-divider-content" style="background-color: var(--background-base); padding: .25rem .5rem;"> <t-comp-oauth key="or-login-with">or log in using</t-comp-oauth> </div> </div>
    <div class="button-stack"><a tabindex="0" as="a" href="/studiocms_api/auth/github" class="sui-button full lg default solid">   github.png <span>GitHub</span>   </a> </div><script type="module" src="/mock/path/AuthLayout.astro?astro&type=script&index=0&lang.ts"></script> <div class="form-footer">  </div> </div> </main>  <div style="display: none;" id="auth-pages-config" data-config_background="studiocms-curves"></div> <script type="module" src="/mock/path/AuthLayout.astro?astro&type=script&index=0&lang.ts"></script> </body></html>"
`;

exports[`Layout Container tests > FirstTimeSetupLayout Container > render component 1`] = `
"<html lang="en-us"> <head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1"><link rel="icon" href="https://cdn.studiocms.dev/favicon.svg" type="image/svg+xml"><link rel="icon" href="https://cdn.studiocms.dev/favicon-light.png" type="image/png" media="(prefers-color-scheme: dark)"><link rel="icon" href="https://cdn.studiocms.dev/favicon-dark.png" type="image/png" media="(prefers-color-scheme: light)"><title>Test Title</title><meta name="title" content="Test Title"><meta name="description" content="Test Description"><meta name="theme-color" content="#a581f3"><script>
    window.theme ??= (() => {
        const defaultTheme = "system";
        const storageKey = "studiocms-theme-preference";
        const store =
            typeof localStorage !== "undefined"
            ? localStorage
            : { getItem: () => null, setItem: () => {} };
    
        const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");
        let systemTheme = mediaMatcher.matches ? "light" : "dark";
        mediaMatcher.addEventListener("change", (event) => {
            systemTheme = event.matches ? "light" : "dark";
            applyTheme(theme.getTheme());
        });
    
        function applyTheme(theme) {
            const resolvedTheme = theme === "system" ? systemTheme : theme;
            document.documentElement.dataset.theme = resolvedTheme;
            document.dispatchEvent(
            new CustomEvent("theme-changed", {
                detail: { theme, systemTheme, defaultTheme },
            })
            );
        }
    
        function setTheme(theme = defaultTheme) {
            store.setItem(storageKey, theme);
            applyTheme(theme);
        }
    
        function getTheme() {
            return store.getItem(storageKey) || defaultTheme;
        }
    
        function getSystemTheme() {
            return systemTheme;
        }
    
        function getDefaultTheme() {
            return defaultTheme;
        }
    
        return { setTheme, getTheme, getSystemTheme, getDefaultTheme };
    })();
    theme.setTheme(theme.getTheme());
</script> <script type="module" src="/mock/path/FirstTimeSetupLayout.astro?astro&type=script&index=0&lang.ts"></script></head> <body> <div id="sui-toaster" class="top-center" ,> <div id="sui-toast-drawer" data-offset="32" data-gap="8" data-duration="4000" style="top: 32px;left: 50%; transform: translateX(-50%);--gap: 8px;padding-left: 32px;padding-right: 32px;"></div> </div> <script type="module" src="/mock/path/FirstTimeSetupLayout.astro?astro&type=script&index=0&lang.ts"></script> <main> <div class="container">  </div> </main>  </body> </html>"
`;
