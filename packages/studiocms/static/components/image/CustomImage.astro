---
/// <reference types="astro/client" />
import { Image } from 'astro:assets';
import { getSecret } from 'astro:env/server';
import Config from 'studiocms:config';
import { Cloudinary } from '@cloudinary/url-gen';
import { fill } from '@cloudinary/url-gen/actions/resize';

const CMS_CLOUDINARY_CLOUDNAME = getSecret('CMS_CLOUDINARY_CLOUDNAME');

interface Props {
	src: string;
	alt: string;
	width: number;
	height: number;
}

/**
 * Cloudinary Plugin
 *
 * This plugin is used to generate Cloudinary URLs for images using `@cloudinary/url-gen` for the StudioCMS `CustomImage` component.
 *
 * @param src the image name or URL
 * @param props the image props
 * @returns the Cloudinary image URL for the given source and props
 */
export function cloudinaryPlugin(src: string, props: Omit<Props, 'src'>) {
	// Cloudinary Image Service (JavaScript SDK) - https://cloudinary.com/documentation/javascript_integration#landingpage

	// Initialize Cloudinary
	const cld = new Cloudinary({
		cloud: {
			cloudName: CMS_CLOUDINARY_CLOUDNAME || '',
		},
	});

	// Configure the image
	const cldSrc = cld
		.image(src)
		.format('auto')
		.quality('auto')
		.resize(fill('auto').width(props.width).height(props.height));

	// Set the delivery type to 'fetch' if the image source is an external URL
	if (src.startsWith('https://') || src.startsWith('http://')) {
		cldSrc.setDeliveryType('fetch');
	}

	// Return the Cloudinary image URL
	return cldSrc.toURL();
}

const { src, ...props } = Astro.props;

// Get the current configured image service
const {
	imageService: { cdnPlugin },
} = Config;

// Get the current configured image service
async function getImageSrc() {
	switch (cdnPlugin) {
		case 'cloudinary-js':
			// Return the Cloudinary image source
			return cloudinaryPlugin(src, props);
		default:
			// Return the original image source if no External image service plugin is configured
			return src;
	}
}

// check if the image source is an external URL
function inferSizeNeeded(url: string) {
	if (url.startsWith('https://') || url.startsWith('http://')) {
		return true;
	}
	return false;
}

// Get the current configured image service source URL
const currentSrcURL = await getImageSrc();

// Set the image properties
const imageProps = {
	src: currentSrcURL,
	inferSize: inferSizeNeeded(currentSrcURL),
	...props,
};
---
<Image loading={"lazy"} {...imageProps}/>