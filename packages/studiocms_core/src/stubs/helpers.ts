import DTSBuilder from '@matthiesenxyz/astrodtsbuilder';
import { createResolver } from 'astro-integration-kit';

const { resolve } = createResolver(import.meta.url);

const helpers = {
	urlGenFactory: resolve('../lib/urlGen.ts'),
	pathGenerators: resolve('../lib/pathGenerators.ts'),
	contentHelper: resolve('../helpers/contentHelper.ts'),
	headDefaults: resolve('../lib/headDefaults.ts'),
	routemap: resolve('../lib/routeMap.ts'),
};

const dtsFile = DTSBuilder();

dtsFile.addSingleLineNote(
	'This file is generated by StudioCMS and should not be modified manually.'
);

dtsFile.addModule('studiocms:helpers', {
	namedExports: [
		{
			name: 'urlGenFactory',
			multiLineDescription: [
				'# URL Generation Helper Function',
				'',
				'@param {boolean} isDashboardRoute - Is this a dashboard route?',
				'@param {string} path - The path to generate the URL for',
				"@param {string} DashboardRoute - The dashboard route to use (Default: 'dashboard')",
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.urlGenFactory}').default`,
		},
		{
			name: 'pathWithBase',
			multiLineDescription: [
				'# pathWithBase Helper Function',
				'',
				"Get the a root-relative URL path with the site's 'base' prefixed.",
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.pathGenerators}').pathWithBase`,
		},
		{
			name: 'fileWithBase',
			multiLineDescription: [
				'# fileWithBase Helper Function',
				'',
				"Get the a root-relative file URL path with the site's 'base' prefixed.",
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.pathGenerators}').fileWithBase`,
		},
	],
});

dtsFile.addModule('studiocms:helpers/contentHelper', {
	namedExports: [
		{
			name: 'contentHelper',
			multiLineDescription: [
				'# A helper function to get the content of a page by its slug.',
				'',
				'@param slug The slug of the page to get the content of. Defined in the PageData table.',
				"@param lang **Not implemented yet.** The language to get the content in. Default is 'default'.",
				"@param package **Not implemented yet.** The package to get the content from. Default is '@astrolicious/studiocms'.",
				'@returns The data and content of the page.',
				'',
				'@deprecated Moved',
				'@example',
				'---',
				'// Get the content of the index page:',
				"import { StudioCMSRenderer, contentHelper } from 'studiocms:components'",
				'',
				'const { title, description, heroImage, content } = await contentHelper("index")',
				'---',
				'',
				'<h1>{title}</h1>',
				'<p>{description}</p>',
				'<img src={heroImage} alt={title} />',
				'<StudioCMSRenderer content={content} />',
			],
			typeDef: `typeof import('${helpers.contentHelper}').contentHelper`,
		},
		{
			name: 'getSiteConfig',
			multiLineDescription: [
				"# Site Configuration helper function to get the site configuration data from Astro Studio's Database.",
				'',
				'@returns The site configuration data. (Title, Description)',
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.contentHelper}').getSiteConfig`,
		},
		{
			name: 'getPageList',
			multiLineDescription: [
				"# Get page list helper function to get a list of all pages from Astro Studio's database.",
				'',
				'@returns A Array of all pages in the database in ascending order of their published date.',
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.contentHelper}').getPageList`,
		},
		{
			name: 'getUserList',
			multiLineDescription: [
				"# Get user list helper function to get a list of all users from Astro Studio's Database.",
				'',
				'@returns A Array of all users in the database.',
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.contentHelper}').getUserList`,
		},
		{
			name: 'getUserById',
			multiLineDescription: [
				"# Get user by ID helper function to get a user by their ID from Astro Studio's Database.",
				'',
				"@param userId The ID of the user to get. You can get this from 'Astro.locals.dbUser.id' when StudioCMS Auth middleware is used.",
				'@returns The user data.',
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.contentHelper}').getUserById`,
		},
	],
	typeExports: [
		{
			name: 'ContentHelperTempResponse',
			typeDef: `import('${helpers.contentHelper}').ContentHelperTempResponse`,
			multiLineDescription: [
				'# Content Helper Temp Response Type',
				'',
				'type ContentHelperTempResponse = {',
				'  id: string;',
				'  package: string;',
				'  title: string;',
				'  description: string;',
				'  publishedAt: Date;',
				'  updatedAt: Date | null;',
				'  slug: string;',
				'  heroImage: string;',
				'  content: string;',
				'}',
				'@deprecated Moved',
			],
		},
		{
			name: 'SiteConfigResponse',
			typeDef: `import('${helpers.contentHelper}').SiteConfigResponse`,
			multiLineDescription: [
				'# Site Config Response Type',
				'',
				'type SiteConfigResponse = {',
				'  title: string;',
				'  id: number;',
				'  description: string;',
				'}',
				'@deprecated Moved',
			],
		},
		{
			name: 'pageDataReponse',
			typeDef: `import('${helpers.contentHelper}').pageDataReponse`,
			multiLineDescription: [
				'# Page Data Response Type',
				'',
				'type pageDataReponse = {',
				'  title: string;',
				'  id: string;',
				'  package: string;',
				'  description: string;',
				'  showOnNav: boolean;',
				'  publishedAt: Date;',
				'  updatedAt: Date | null;',
				'  slug: string;',
				'  contentLang: string | null;',
				'  heroImage: string;',
				'}',
				'@deprecated Moved',
			],
		},
		{
			name: 'UserResponse',
			typeDef: `import('${helpers.contentHelper}').UserResponse`,
			multiLineDescription: [
				'# User Response Type',
				'',
				'type UserResponse = {',
				'  id: string;',
				'  name: string;',
				'  username: string;',
				'  url: string | null;',
				'  email: string | null;',
				'  avatar: string | null;',
				'  githubId: number | null;',
				'  githubURL: string | null;',
				'  discordId: string | null;',
				'  googleId: string | null;',
				'  auth0Id: string | null;',
				'  password: string | null;',
				'  updatedAt: Date | null;',
				'  createdAt: Date | null;',
				'}',
				'@deprecated Moved',
			],
		},
	],
});

dtsFile.addModule('studiocms:helpers/headDefaults', {
	namedExports: [
		{
			name: 'headDefaults',
			multiLineDescription: [
				'# Default Head Configuration',
				'',
				'A helper function to get the default head configuration for a page.',
				'@deprecated Moved',
			],
			typeDef: `typeof import('${helpers.headDefaults}').headDefaults`,
		},
	],
});

dtsFile.addModule('studiocms:helpers/routemap', {
	namedExports: [
		{
			name: 'getSluggedRoute',
			typeDef: `typeof import('${helpers.routemap}').getSluggedRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'getEditRoute',
			typeDef: `typeof import('${helpers.routemap}').getEditRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'getDeleteRoute',
			typeDef: `typeof import('${helpers.routemap}').getDeleteRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'makeNonDashboardRoute',
			typeDef: `typeof import('${helpers.routemap}').makeNonDashboardRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'makeDashboardRoute',
			typeDef: `typeof import('${helpers.routemap}').makeDashboardRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'makeAPIDashboardRoute',
			typeDef: `typeof import('${helpers.routemap}').makeAPIDashboardRoute`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'StudioCMSRoutes',
			typeDef: `typeof import('${helpers.routemap}').StudioCMSRoutes`,
			singleLineDescription: '@deprecated moved to lib',
		},
		{
			name: 'sideBarLinkMap',
			typeDef: `typeof import('${helpers.routemap}').sideBarLinkMap`,
			singleLineDescription: '@deprecated moved to lib',
		},
	],
});

export const helpersDtsFileOutput = dtsFile.makeAstroInjectedType('helpers.d.ts');

export default helpersDtsFileOutput;
