import DTSBuilder from '@matthiesenxyz/astrodtsbuilder';
import { createResolver } from 'astro-integration-kit';

const { resolve } = createResolver(import.meta.url);

const i18nDTS = DTSBuilder();

i18nDTS.addSingleLineNote(
	'This file is generated by StudioCMS and should not be modified manually.'
);

i18nDTS.addModule('studiocms:i18n', {
	namedExports: [
		{
			name: 'staticPaths',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').staticPaths`,
			multiLineDescription: [
				'Example of how to use this i18n utils on a Static page',
				'',
				'```ts',
				'export async function getStaticPaths() {',
				'	const paths = staticPaths();',
				'	return paths;',
				'}',
				'```',
				'',
				'If the default language is hidden, the paths for the default language will be generated without the language prefix while all extra languages will have the prefix. (e.g. When `showDefaultLang` is false: `/en/page` will be `/page` and spanish will be `/es/page`)',
				'',
				'@returns An array of paths for all languages',
			],
		},
		{
			name: 'getLangFromUrl',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').getLangFromUrl`,
			multiLineDescription: [
				"Extracts the language key from the given URL's pathname.",
				'',
				'@param url - The URL object from which to extract the language key.',
				'@returns The language key if it exists in the `uiTranslations`, otherwise returns the default language key.',
			],
		},
		{
			name: 'useTranslations',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').useTranslations`,
			multiLineDescription: [
				'Retrieves a translation function for a given language and component.',
				'',
				'@param lang - The language key to use for translations.',
				'@param comp - The component key to use for translations.',
				'@returns A function that takes a translation key and returns the corresponding translated string.',
			],
		},
		{
			name: 'useTranslatedPath',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').useTranslatedPath`,
			multiLineDescription: [
				'Returns a function that translates a given path based on the provided language.',
				'',
				'@param lang - The language key to use for translations.',
				'@returns A function that takes a path and an optional language key, and returns the translated path.',
				'If the language key is not provided, the default language key is used.',
				'If the language is the default language and `showDefaultLang` is false, the original path is returned.',
				'Otherwise, the path is prefixed with the language key.',
			],
		},
		{
			name: 'languageSelectorOptions',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').languageSelectorOptions`,
			multiLineDescription: [
				'Generates an array of language selector options from the `uiTranslations` object.',
				'Each option contains a `key` and a `value` where:',
				'- `key` is a language key from `UiLanguageKeys`.',
				'- `value` is the display name of the language.',
				'',
				'@returns An array of objects representing language selector options.',
			],
		},
		{
			name: 'getCurrentURLPath',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').getCurrentURLPath`,
			multiLineDescription: [
				'Retrieves the current URL path, adjusting for language settings.',
				'',
				'This function checks if the URL path includes `/_server-islands`. If it does,',
				'it extracts the referer URL from the request headers and determines the current',
				'language from that URL. If the current language is the default language, it returns',
				'the pathname as is. Otherwise, it replaces the language segment in the pathname with `/`.',
				'',
				'If the URL path does not include `/_server-islands`, it uses the Astro URL directly',
				'to determine the current language and adjust the pathname accordingly.',
				'',
				'@param {AstroGlobal} Astro - The global Astro object containing URL and request information.',
			],
		},
		{
			name: 'switchLanguage',
			typeDef: `typeof import('${resolve('../i18n/index.ts')}').switchLanguage`,
			multiLineDescription: [
				'Function to switch the language of the current page.',
				'',
				'@param {AstroGlobal} Astro - The global Astro object.',
			],
		},
	],
});

export const i18nDTSOutput = i18nDTS.makeAstroInjectedType('i18n.d.ts');
