---
import { StudioCMSRoutes } from 'studiocms:lib';
import { studioCMS_SDK_Cache } from 'studiocms:sdk/cache';
import { Button, Center, Group, Icon, Input, Modal } from 'studiocms:ui/components';

interface Props {
	editPage?: boolean;
	createPage?: boolean;
	title?: string;
	editFolder?: boolean;
	createFolder?: boolean;
}

const {
	editPage,
	createPage,
	createFolder,
	editFolder,
	title = 'Content Management',
} = Astro.props;

let pageTitle = title;
let pageSlug: string | undefined = undefined;
let currentId = '';
let folderName = '';

const urlParams = Astro.url.searchParams;
const editId = urlParams.get('edit') || '';

if (editId) {
	const res = await studioCMS_SDK_Cache.GET.page.byId(editId);

	if (editPage) {
		pageTitle = `Edit Page: ${res.data.title}`;
		pageSlug = res.data.slug;
		currentId = res.data.id;
	}
}

const folderId = urlParams.get('folder') || '';

if (folderId) {
	const res = await studioCMS_SDK_Cache.GET.folderList();

	const folder = res.data.find((folder) => folder.id === folderId);

	if (editFolder && folder) {
		pageTitle = `Edit Folder: ${folder.name}`;
		currentId = folder.id;
		folderName = folder.name;
	}
}

const currentMode = editPage
	? 'edit-page'
	: editFolder
		? 'edit-folder'
		: createFolder
			? 'create-folder'
			: createPage
				? 'create-page'
				: 'none';
---
<header class="page-header">
  <div class="page-title-container">
    <h1 class="page-title" data-link={StudioCMSRoutes.sdk.pages}>{pageTitle}</h1>
  </div>
  <div id="page-actions-container" class="page-actions-container">

    { editPage && ( 
      <Group>
        <Button id="delete-page-modal-trigger" color="danger" type="submit" size="sm" disabled={pageSlug === 'index'}>
            <Icon name="trash-20-solid" width={20} height={20} />
            Delete
        </Button>
        <Button id="edit-button" variant="solid" size="sm"  color="primary" type="submit" form="edit-page-form">
          <Icon slot="start-content" name="check-20-solid" width={20} height={20} />
          Save Changes
        </Button>
      </Group>
      <Modal 
        id='delete-page-modal'
        isForm
        cancelButton={{ label: 'Cancel', color: 'default' }}
        actionButton={{ label: 'Confirm', color: 'danger' }}
        >
        <h2 slot='header'>Are you sure you want to Delete this page?</h2>
        <Center>
          <div class="modal-body">
            <input type="hidden" name="page-id" value={currentId} />
            <input type="hidden" name="page-slug" value={pageSlug} />
                    
            <span>Enter the slug <code>{pageSlug}</code> to confirm</span>
           
            <Input name="slug-confirm" placeholder={`${pageSlug?.slice(0, pageSlug.length-2)}...`} isRequired />
            
            <span style="color: hsl(var(--danger-base))">This action cannot be undone.</span>
          </div>
        </Center>
      </Modal>
    )}

    { editFolder && ( 
      <Group>
        <Button id="delete-folder-modal-trigger" color="danger" type="submit" size="sm">
          <Icon name="trash-20-solid" width={20} height={20} />
          Delete
        </Button>
        <Button id="edit-button" variant="solid" size="sm"  color="primary" type="submit" form="edit-folder-form">
          <Icon slot="start-content" name="check-20-solid" width={20} height={20} />
          Save Changes
        </Button>
      </Group>
      <Modal
        id="delete-folder-modal"
        isForm
        cancelButton={{ label: 'Cancel', color: 'default' }}
        actionButton={{ label: 'Delete', color: 'danger' }}
        >
        <h2 slot="header">Are you sure you want to delete this folder?</h2>
        <Center>
          <div class="modal-body">
            <input type="hidden" name="folder-id" value={currentId} />
            <input type="hidden" name="folder-name" value={folderName} />

            <span>Enter the folder name <code>{folderName}</code> to confirm</span>

            <Input name="confirm-folder-name" placeholder={`${folderName.slice(0, folderName.length-2)}...`} isRequired />
          
            <span style="color: hsl(var(--danger-base))">This action cannot be undone.</span>
          </div>
        </Center>
      </Modal>
    )}

    { createFolder && ( 
      <Button id="edit-button" variant="solid" size="sm"  color="primary" type="submit" form="create-folder-form">
        <Icon slot="start-content" name="check-20-solid" width={20} height={20} />
        Create
      </Button>
    )}

    {createPage && ( 
      <Group>
      <Button id="draft-button" variant="outlined" size="sm" color="primary" type="submit" form="page-create-form" disabled>
        <Icon slot="start-content" name="document-text-20-solid" width={20} height={20} />
        Save Draft
      </Button>
      <Button id="publish-button" variant="solid" size="sm"  color="primary" type="submit" form="page-create-form">
        <Icon slot="start-content" name="check-20-solid" width={20} height={20} />
        Publish
      </Button>
      </Group>
    )}
  </div>
</header>

<div
  id="current-mode-selector"
  style="display: none;"
  data-mode={currentMode}
></div>

<script>
    import { ModalHelper } from 'studiocms:ui/components';

    const mode = (document.getElementById('current-mode-selector') as HTMLDivElement).dataset.mode;

    switch (mode) {
      case "edit-page": {
        const deletePageModal = new ModalHelper('delete-page-modal', 'delete-page-modal-trigger');

        deletePageModal.registerConfirmCallback((formData) => {
            const pageId = formData?.get('page-id')?.toString();
            const pageSlug = formData?.get('page-slug')?.toString();
            const slugConfirm = formData?.get('slug-confirm')?.toString();

            if (slugConfirm === pageSlug) {
                console.log('Confirmed', pageId);
            } else {
                console.log('Not Confirmed');
            }

            // TODO: Setup api call
        })
        break;
      }
      case "edit-folder": {
        const deleteFolderModal = new ModalHelper('delete-folder-modal', 'delete-folder-modal-trigger');

        deleteFolderModal.registerConfirmCallback((formData) => {
            const folderId = formData?.get('folder-id');
            const folderName = formData?.get('folder-name');
            const confirmFolderName = formData?.get('confirm-folder-name');

            if (folderName === confirmFolderName) {
                console.log('Deleting folder:', folderId);
            } else {
                console.log('Folder name does not match');
            }
            // TODO: Setup api call
        })
        break;
      }
      case "create-folder":
        break;
      case "create-page":
        break;
      default:
        break;
    }
</script>

<style>
.page-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}

.page-title-container {
  display: flex;
  flex-direction: column;
  gap: .5rem;
  width: fit-content;
}

.page-title {
  display: block;
  width: fit-content;
  margin: 0;
}

.page-actions-container {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 1rem;
}

.modal-body {
    display: flex;
    flex-direction: column;
    gap: 1rem;

    span {
        font-size: .875rem;
    }

    code {
        background-color: hsl(var(--background-step-3));
        padding: .25rem;
        border-radius: 4px;
    }
}
</style>
