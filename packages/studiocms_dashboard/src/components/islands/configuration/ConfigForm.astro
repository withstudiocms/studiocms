---
import { validImages } from 'studiocms:auth/utils/validImages';
import { studioCMS_SDK_Cache } from 'studiocms:sdk/cache';
import { Card, Input, Select } from '@studiocms/ui/components';
import LightVsDark from './LightVsDark.astro';

const { data } = await studioCMS_SDK_Cache.GET.siteConfig();

const ogSelectOptions = validImages.map(({ label, name: value }) => ({ label, value }));

const currentLoginPageBg = validImages.find(
	({ name }) => name === data.loginPageBackground && name !== 'custom'
);

const blobs = validImages.filter(({ name }) => name === 'studiocms-blobs')[0];
const blocks = validImages.filter(({ name }) => name === 'studiocms-blocks')[0];
const curves = validImages.filter(({ name }) => name === 'studiocms-curves')[0];
---

<form id="site-config-form">
    <div class="form-content">

        <div class="form-row">
            <Input label='Site Title' name='site-title' placeholder='My Awesome Website' value={data.title} isRequired />
            <Input label='Site Description' name='site-description' placeholder='Built with StudioCMS!' value={data.description} isRequired />
        </div>

        <div class="form-row">
            <Input label="Default Open Graph Image" name="default-og-image" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.defaultOgImage} />
            <Input label="Site Icon (Public facing Favicon)" name="site-icon" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.siteIcon} />
        </div>

        <div class="form-row">
            <Select label='Login Page Background Image' name='login-page-background' defaultValue={data.loginPageBackground} options={ogSelectOptions} fullWidth />
            <Input label="Login Page Background Image (Custom)" name="login-page-background-custom" placeholder="'https://...' for local, or '/...' for public/ folder" value={data.loginPageCustomImage} disabled={data.loginPageBackground !== 'custom'} />
        </div>

        <Card class="login-preview-container">
            <div slot="header">
                <span>Login Page Preview (Dark/Light)</span>
            </div>
            {
                currentLoginPageBg && currentLoginPageBg.name !== 'custom' && (
                    <LightVsDark {...currentLoginPageBg} />
                )
            }
        </Card>

    </div>
</form>

<script is:inline define:vars={{
    blobsLight: blobs?.light?.src,
    blobsDark: blobs?.dark?.src,
    blocksLight: blocks?.light?.src,
    blocksDark: blocks?.dark?.src,
    curvesLight: curves?.light?.src,
    curvesDark: curves?.dark?.src,
}}>

// Selectors
const loginPageBgSelectOptions = document.querySelector('#login-page-background-dropdown').querySelectorAll('.sui-select-option');
const customInput = document.querySelector('input[name="login-page-background-custom"]');
const customInputLabel = document.querySelector('label[for="login-page-background-custom"]');
const previewContainer = document.querySelector('.login-preview-container');
const lightImageHolder = document.querySelector('.light-image-holder');
const darkImageHolder = document.querySelector('.dark-image-holder');

loginPageBgSelectOptions.forEach((option) => {
    option.addEventListener('click', (event) => {
        const selectedValue = option.getAttribute('value');

        if (selectedValue === 'custom') {
            customInput.removeAttribute('disabled');
            customInputLabel.classList.remove('disabled');
        } else {
            customInput.setAttribute('disabled', 'disabled');
            customInputLabel.classList.add('disabled');
        }

        if (selectedValue === 'custom') {
            previewContainer.style.display = 'none';
        } else {
            previewContainer.style.display = 'block';

            if (selectedValue === 'studiocms-blobs') {
                lightImageHolder.src = blobsLight;
                darkImageHolder.src = blobsDark;
            }

            if (selectedValue === 'studiocms-blocks') {
                lightImageHolder.src = blocksLight;
                darkImageHolder.src = blocksDark;
            }

            if (selectedValue === 'studiocms-curves') {
                lightImageHolder.src = curvesLight;
                darkImageHolder.src = curvesDark;
            }

        }
    });
});
</script>

<style>
    .form-content {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
    }

    .login-preview-container {
        width: min-content;
        height: min-content;
    }

    @media screen and (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
    }
</style>