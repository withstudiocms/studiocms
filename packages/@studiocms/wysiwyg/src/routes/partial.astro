---
export const partial = true;

import { getRendererComponents } from 'studiocms:component-registry/runtime';
import { apiResponseLogger } from 'studiocms:logger';

// Define the PropData type
type PropData = {
	componentKey: string;
	// biome-ignore lint/suspicious/noExplicitAny: this is a dynamic prop type
	props?: Record<string, any>;
	slot?: string;
};

// Import components
const componentRegistry = await getRendererComponents();

// Parse the request body as JSON
let data: PropData;
try {
	data = await Astro.request.json();
} catch (error) {
	return apiResponseLogger(400, 'Invalid JSON in request body', error);
}

// Validate the data
if (!data || typeof data.componentKey !== 'string' || !data.componentKey.trim()) {
	return apiResponseLogger(400, 'Missing or invalid componentKey');
}

// Destructure the componentKey, props, and slot from the data
const { componentKey, props = {}, slot } = data;

// Check if the component exists in the registry
const Component = componentRegistry[componentKey];

// Handle case where component doesn't exist
if (!Component) {
	return apiResponseLogger(404, `Component "${componentKey}" not found`);
}
---
<Component {...props}>
	{slot && <Fragment set:html={slot} />}
</Component>