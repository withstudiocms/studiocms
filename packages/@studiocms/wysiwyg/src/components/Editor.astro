---
import '@studiocms/ui/css/colors.css';
import 'grapesjs/dist/css/grapes.min.css';
import '../styles/editor.css';
import { getRegistryComponents } from 'studiocms:component-registry/runtime';
import type { PluginPageTypeEditorProps } from 'studiocms/types';

// Get the component registry for the editor
const componentRegistry = getRegistryComponents();

interface Props extends PluginPageTypeEditorProps {}

// Extract the content from Astro props
const { content, id } = Astro.props as Props;
---

<div
    class="scms-grapesjs-container"
    data-page-id={id}
    data-component-registry={JSON.stringify(componentRegistry)}
>
    <div class="editor">
        <div id="gjs"></div>
    </div>
</div>

<textarea id="page-content" name="page-content" style="display: none;"
    >{content}</textarea
>

<script>
    import { toast } from "@studiocms/ui/components/Toast/toast.js";
    import grapesjs, { usePlugin, type EditorEvent } from "grapesjs";
    import { baseConfig } from "../common/editor-settings.js";
    import {
        getEditorElmData,
        StudioCMSDbStorageAdapter,
    } from "../common/editor-utils.js";
    import { astroComponents } from "../common/componentRegistry.js";
    import grapesBlocks from "../common/grapesBlocks/index.js";

    // Get the editor options for Astro components and inline storage
    // This will be used to initialize the plugins with the correct settings
    const { astroComponentsOpts, StudioCMSDbStorageAdapterOpts } =
        getEditorElmData(document, {
            container: ".scms-grapesjs-container",
            pageContent: "#page-content",
        });

    // Initialize the GrapesJS editor with the base configuration and plugins
    // The plugins include custom components, inline storage, and various editor features
    // such as blocks, tabs, countdown, custom code, tooltips, image editor,
    // typed text, forms, rich text editor, and the StudioCMS GrapesJS plugin
    // This setup allows for a rich editing experience with various functionalities
    const editor = grapesjs.init({
        ...baseConfig,
        plugins: [
            usePlugin(astroComponents, astroComponentsOpts),
            usePlugin(StudioCMSDbStorageAdapter, StudioCMSDbStorageAdapterOpts),
            usePlugin(grapesBlocks),
        ],
    });

    // Simple warn notifier
    const origWarn = console.warn;
    console.warn = function (msg) {
        if (msg.indexOf("[undefined]") == -1) {
            toast({
                title: "Warning",
                type: "warning",
                description: msg,
                duration: 5000,
            });
        }
        origWarn(msg);
    };

    // Do stuff on load
    editor.on("load", function () {
        const $ = grapesjs.$;

        // Load and show settings and style manager
        let openTmBtn = editor.Panels.getButton("views", "open-tm");
        openTmBtn && openTmBtn.set("active", 1);
        let openSm = editor.Panels.getButton("views", "open-sm");
        openSm && openSm.set("active", 1);

        // Remove trait view
        editor.Panels.removeButton("views", "open-tm");

        // Add Settings Sector
        let traitsSector = $(
            '<div class="gjs-sm-sector no-select">' +
                '<div class="gjs-sm-sector-title"><span class="icon-settings fa fa-cog"></span> <span class="gjs-sm-sector-label">Settings</span></div>' +
                '<div class="gjs-sm-properties" style="display: none;"></div></div>',
        );
        let traitsProps = traitsSector.find(".gjs-sm-properties");
        traitsProps.append($(".gjs-traits-cs"));
        $(".gjs-sm-sectors").before(traitsSector);
        traitsSector.find(".gjs-sm-sector-title").on("click", function () {
            let traitStyle = traitsProps.get(0).style;
            let hidden = traitStyle.display === "none";
            if (hidden) {
                traitStyle.display = "block";
            } else {
                traitStyle.display = "none";
            }
        });

        // Open block manager
        let openBlocksBtn = editor.Panels.getButton("views", "open-blocks");
        openBlocksBtn && openBlocksBtn.set("active", 1);
    });

    const updateSaveIndicator = () => {
        const saveIndicator = document.querySelector(
            ".save-indicator",
        ) as HTMLElement;

        if (saveIndicator) {
            const isDirty = editor.getDirtyCount() > 0;

            if (isDirty) {
                saveIndicator.classList.add("dirty");
            } else {
                saveIndicator.classList.remove("dirty");
            }
        }
    };

    const updateIndicatorEvents: EditorEvent[] = [
        "load",
        "update",
        "component:add",
        "component:remove",
        "component:update",
        "undo",
        "redo",
    ];

    updateIndicatorEvents.forEach((event) =>
        editor.on(event, updateSaveIndicator),
    );
</script>
