---
import { authEnvCheck } from 'studiocms:auth/utils/authEnvCheck';
import { StudioCMSRoutes } from 'studiocms:helpers/routemap';
import { getLangFromUrl, staticPaths, useTranslatedPath, useTranslations } from 'studiocms:i18n';
import Config from 'virtual:studiocms/config';
import { Button, Input } from '@studiocms/ui/components';
import type { GetStaticPaths } from 'astro';
import StaticAuthCheck from '../components/StaticAuthCheck.astro';
import AuthLayout from '../layouts/AuthLayout.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang, '@studiocms/auth:signup');
const tPath = useTranslatedPath(lang);

export const getStaticPaths = (() => {
	const paths = staticPaths();
	return paths;
}) satisfies GetStaticPaths;

const {
	dashboardConfig: {
		AuthConfig: {
			providers,
			providers: {
				usernameAndPassword,
				usernameAndPasswordConfig: { allowUserRegistration },
			},
		},
	},
} = Config;

const {
	authLinks: { loginAPI, loginURL },
} = StudioCMSRoutes;

const { SHOW_OAUTH } = await authEnvCheck(providers);

let paragraph: string;

if (usernameAndPassword && SHOW_OAUTH) {
	paragraph = t('sub-header-usernamepasswordoauth');
} else if (usernameAndPassword && !SHOW_OAUTH) {
	paragraph = t('sub-header-usernamepassword');
} else if (!usernameAndPassword && SHOW_OAUTH) {
	paragraph = t('sub-header-oauth');
} else {
	paragraph = t('sub-header-noprovider');
}
---
<AuthLayout title={t('title')} description={t('description')} lang={lang}>
    
    <div slot="header" class="form-header">
        <h1>{t('header')}</h1>
        <p>{paragraph}</p>
    </div>

    { usernameAndPassword && (
        <form class="form" id="signup-form" method="post" action={loginAPI}>

            <Input label={t('username-label')} name="username" type="text" />
            <Input label={t('email-label')} name="email" type="email" />
            <Input label={t('displayname-label')} name="displayname" type="text" />
            <Input label={t('password-label')} name="password" type="password" />
            <Input label={t('confirm-password-label')} name="confirm-password" type="password" />

            <Button type="submit" as="button" type="submit" color='primary' variant='solid'>{t('create-account-button')}</Button>
        </form>
    )}

    { allowUserRegistration && (
        <p slot="footer">{t('allow-login-haveaccount')} <a href={tPath(loginURL)}>{t('allow-login-login')}</a></p>
    )}

    <StaticAuthCheck server:defer />

</AuthLayout>

<script>
    import { formListener } from 'studiocms:auth/scripts/formListener';
    const signupForm = document.getElementById('signup-form') as HTMLFormElement;

    signupForm.addEventListener('submit', async (event) => formListener(event, signupForm, 'register'));
</script>