import DTSBuilder from '@matthiesenxyz/astrodtsbuilder';
import { addVirtualImports, createResolver, defineUtility } from 'astro-integration-kit';

export const componentResolver = defineUtility('astro:config:setup')(
	(params, options: { name: string; CustomImageOverride: string | undefined }) => {
		// Destructure Params
		const { config: astroConfig } = params;

		// Create Resolver for User-Defined Virtual Imports
		const { resolve: rootResolve } = createResolver(astroConfig.root.pathname);
		const { resolve } = createResolver(import.meta.url);

		// Create Virtual Resolver
		let customImageResolved: string;

		if (options.CustomImageOverride) {
			customImageResolved = rootResolve(options.CustomImageOverride);
		} else {
			customImageResolved = resolve('./components/CustomImage.astro');
		}

		addVirtualImports(params, {
			name: options.name,
			imports: {
				'studiocms:imageHandler/components': `export { default as CustomImage } from '${customImageResolved}';`,
			},
		});

		const dtsFile = DTSBuilder();

		dtsFile.addSingleLineNote(
			'This file is generated by StudioCMS and should not be modified manually.'
		);

		dtsFile.addModule('studiocms:imageHandler/components', {
			namedExports: [
				{
					name: 'CustomImage',
					multiLineDescription: [
						'# Custom Image Component for StudioCMS:imageHandler',
						'',
						'This component will adapt to the current configuration of the StudioCMS image handler and will render the used image accordingly.',
						'',
						'@props {string} src - Image Source',
						'@props {string} alt - Image Alt',
						'@props {number} width - Image Width',
						'@props {number} height - Image Height',
					],
					typeDef: `typeof import('${customImageResolved}').default`,
				},
			],
		});

		const dtsFileAstro = dtsFile.makeAstroInjectedType('imageHandler.d.ts');

		return {
			imageHandlerDtsFile: dtsFileAstro,
		};
	}
);
