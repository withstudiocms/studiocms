import DTSBuilder from '@matthiesenxyz/astrodtsbuilder';
import type { AstroIntegration } from 'astro';
import { addVirtualImports, createResolver } from 'astro-integration-kit';
import { envField } from 'astro/config';
import { loadEnv } from 'vite';
import type { StudioCMSImageHandlerOptions } from './schema.js';
import { addAstroEnvConfig } from './utils/astroEnvConfig.js';
import { integrationLogger } from './utils/integrationLogger.js';
import readJson from './utils/readJson.js';

const { name: pkgName } = readJson<{ name: string }>(new URL('../package.json', import.meta.url));

/**
 * StudioCMS Image Handler Integration
 */
function studioCMSImageHandler(options: StudioCMSImageHandlerOptions): AstroIntegration {
	// Define the Image Component Path
	let imageComponentPath: string;

	return {
		name: pkgName,
		hooks: {
			'astro:config:setup': (params) => {
				// Load Environment Variables
				const env = loadEnv('all', process.cwd(), 'CMS');

				// Destructure the params object
				const { logger, updateConfig } = params;

				// Destructure the options object
				const {
					verbose,
					imageService: { cdnPlugin },
				} = options;

				// Add Astro Environment Configuration
				addAstroEnvConfig(params, {
					validateSecrets: false,
					schema: {
						CMS_CLOUDINARY_CLOUDNAME: envField.string({
							context: 'server',
							access: 'secret',
							optional: true,
						}),
					},
				});

				// Check for Cloudinary CDN Plugin
				if (cdnPlugin === 'cloudinary-js') {
					if (!env.CMS_CLOUDINARY_CLOUDNAME) {
						integrationLogger(
							{ logger, logLevel: 'warn', verbose: true },
							'Using the Cloudinary CDN JS SDK Plugin requires the CMS_CLOUDINARY_CLOUDNAME environment variable to be set. Please add this to your .env file.'
						);
					}
				}

				// Setup and Configure CustomImage Component
				integrationLogger(
					{ logger, logLevel: 'info', verbose },
					'Configuring CustomImage Component...'
				);

				// Create resolver relative to this file
				const { resolve } = createResolver(import.meta.url);

				// Create resolver relative to Astro config root
				const { resolve: astroConfigResolve } = createResolver(params.config.root.pathname);

				imageComponentPath = options.overrides.CustomImageOverride
					? astroConfigResolve(options.overrides.CustomImageOverride)
					: resolve('../components/CustomImage.astro');

				addVirtualImports(params, {
					name: pkgName,
					imports: {
						'studiocms:imageHandler/components': `export { default as CustomImage } from '${imageComponentPath}';`,
					},
				});

				// Update the Astro Config with the Image Service Configuration to allow for remote images
				integrationLogger(
					{ logger, logLevel: 'info', verbose },
					'Updating Astro Config with Image Service Configuration to allow for remote images...'
				);
				updateConfig({
					image: {
						remotePatterns: [
							{
								protocol: 'https',
							},
						],
					},
				});
			},
			'astro:config:done': ({ injectTypes }) => {
				const dtsFile = DTSBuilder();

				dtsFile.addSingleLineNote(
					'This file is generated by StudioCMS and should not be modified manually.'
				);

				dtsFile.addModule('studiocms:imageHandler/components', {
					namedExports: [
						{
							name: 'CustomImage',
							multiLineDescription: [
								'# Custom Image Component for StudioCMS:imageHandler',
								'',
								'This component will adapt to the current configuration of the StudioCMS image handler and will render the used image accordingly.',
								'',
								'@props {string} src - Image Source',
								'@props {string} alt - Image Alt',
								'@props {number} width - Image Width',
								'@props {number} height - Image Height',
							],
							typeDef: `typeof import('${imageComponentPath}').default`,
						},
					],
				});

				const dtsFileAstro = dtsFile.makeAstroInjectedType('imageHandler.d.ts');

				injectTypes(dtsFileAstro);
			},
		},
	};
}

export default studioCMSImageHandler;
